[
    {
        "prediction": "concert_singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers do we have?",
        "context": "How many singers do we have? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select count(*) from singer",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "context": "What is the total number of singers? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select count(*) from singer",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name, country, age from singer order by age desc",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "context": "Show name, country, age for all singers ordered by age from the oldest to the youngest. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name, country, age from singer order by age desc",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name, country, age from singer order by age desc",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "context": "What are the names, countries, and ages for every singer in descending order of age? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name, country, age from singer order by age desc",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select avg(age), min(age), max(age) from singer where country = 'France'",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "context": "What is the average, minimum, and maximum age of all singers from France? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country ( France ), song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select avg(age), min(age), max(age) from singer where country = 'France'",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select avg(age), min(age), max(age) from singer where country = \"France\"",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "context": "What is the average, minimum, and maximum age for all French singers? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select avg(age), min(age), max(age) from singer where country = 'France'",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select song_name, song_release_year from singer order by age asc limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "context": "Show the name and the release year of the song by the youngest singer. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select song_name, song_release_year from singer order by age limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select song_name, song_release_year from singer order by age asc limit 1",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "context": "What are the names and release years for all the songs of the youngest singer? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select song_name, song_release_year from singer order by age limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select distinct country from singer where age > 20",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "context": "What are all distinct countries where singers above age 20 are from? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select distinct country from singer where age > 20",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select distinct country from singer where age > 20",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are  the different countries with singers above age 20?",
        "context": "What are the different countries with singers above age 20? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select distinct country from singer where age > 20",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select country, count(*) from singer group by country",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all countries and the number of singers in each country.",
        "context": "Show all countries and the number of singers in each country. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select country, count(*) from singer group by country",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select country, count(*) from singer group by country",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "context": "How many singers are from each country? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select country, count(*) from singer group by country",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select song_name from singer where age > (select avg(age) from singer)",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "context": "List all song names by singers above the average age. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select song_name from singer where age > (select avg(age) from singer)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select song_name from singer where age > (select avg(age) from singer)",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "context": "What are all the song names by singers who are older than average? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select song_name from singer where age > (select avg(age) from singer)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "context": "Show location and name for all stadiums with a capacity between 5000 and 10000. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "context": "What are the locations and names of all stations with capacity between 5000 and 10000? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select location, name from stadium where capacity between 5000 and 10000",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select max(capacity), avg(capacity) from stadium",
        "query": "select max(capacity), average from stadium",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "context": "What is the maximum capacity and the average of all stadiums? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select max(capacity), average from stadium",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select avg(capacity), max(capacity) from stadium",
        "query": "select avg(capacity) ,  max(capacity) from stadium",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "context": "What is the average and maximum capacities for all stadiums? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select avg(capacity), max(capacity) from stadium",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name, capacity from stadium order by average desc limit 1",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "context": "What is the name and capacity for the stadium with highest average attendance? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name, capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name, capacity from stadium order by average desc limit 1",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "context": "What is the name and capacity for the stadium with the highest average attendance? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name, capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from concert where year = 2014 or year = 2015",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts are there in year 2014 or 2015?",
        "context": "How many concerts are there in year 2014 or 2015? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select count(*) from concert where year = 2014 or year = 2015",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from concert where year = 2014 or year = 2015",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts occurred in 2014 or 2015?",
        "context": "How many concerts occurred in 2014 or 2015? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select count(*) from concert where year = 2014 or year = 2015",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "context": "Show the stadium name and the number of concerts in each stadium. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select stadium_id, count(*) from concert group by stadium_id",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many concerts play there?",
        "context": "For each stadium, how many concerts play there? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "context": "Show the stadium name and capacity with most number of concerts in year 2014 or after. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
        "query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "context": "What is the name and capacity of the stadium with the most concerts after 2013? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name, t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select year from concert group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of concerts?",
        "context": "Which year has most number of concerts? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select year from concert group by year order by count(*) desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select year from concert group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year that had the most concerts?",
        "context": "What is the year that had the most concerts? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select year from concert group by year order by count(*) desc limit 1",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from stadium where stadium_id not in (select stadium_id from concert)",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the stadium names without any concert.",
        "context": "Show the stadium names without any concert. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name from stadium where stadium_id not in (select stadium_id from concert)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from stadium where stadium_id not in (select stadium_id from concert)",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are the names of the stadiums without any concerts?",
        "context": "What are the names of the stadiums without any concerts? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name from stadium where stadium_id not in (select stadium_id from concert)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select country from singer where age > 40 intersect select country from singer where age < 30",
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "context": "Show countries where a singer above age 40 and a singer below 30 are from. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select country from singer where age > 40 intersect select country from singer where age < 30",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "context": "Show names for all stadiums except for stadiums having a concert in year 2014. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "context": "What are the names of all stadiums that did not have a concert in 2014? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t1.concert_name, t1.theme, count(*) from concert as t1 join singer_in_concert as t2 on t1.concert_id = t2.concert_id group by t1.concert_id",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "context": "Show the name and theme for all concerts and the number of singers in each concert. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.concert_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select concert_name, theme, count(*) from concert group by concert_id",
        "query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "context": "What are the names, themes, and number of singers for every concert? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.concert_name, t2.theme, count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t1.singer_id",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of concerts for each singer.",
        "context": "List singer names and number of concerts for each singer. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.name",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "context": "What are the names of the singers and number of concerts for each person? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "List all singer names in concerts in year 2014.",
        "context": "List all singer names in concerts in year 2014. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "context": "What are the names of the singers who performed in a concert in 2014? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, t2.country from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id where t2.song_name like '%hey%'",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "context": "what is the name and nation of the singer who have a song having 'Hey' in its name? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name, country from singer where song_name like '%hey%'",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select name, country from singer where song_name like '%hey%'",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "context": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select name, country from singer where song_name like '%hey%'",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "context": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "context": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "context": "Find the number of concerts happened in the stadium with the highest capacity. | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "concert_singer | select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "context": "What are the number of concerts that occurred in the stadium with the largest capacity? | concert_singer | stadium : stadium_id, location, name, capacity, highest, lowest, average | singer : singer_id, name, country, song_name, song_release_year, age, is_male | concert : concert_id foreign key singer_in_concert, concert_name, theme, stadium_id foreign key stadium, year | singer_in_concert : concert_id foreign key concert, singer_id foreign key singer",
        "label": "concert_singer | select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "stadium",
            "singer",
            "concert",
            "singer_in_concert"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3
            ],
            "column_name": [
                "*",
                "Stadium_ID",
                "Location",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average",
                "Singer_ID",
                "Name",
                "Country",
                "Song_Name",
                "Song_release_year",
                "Age",
                "Is_male",
                "concert_ID",
                "concert_Name",
                "Theme",
                "Stadium_ID",
                "Year",
                "concert_ID",
                "Singer_ID"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                21,
                20
            ],
            "other_column_id": [
                1,
                8,
                15
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "context": "Find the number of pets whose weight is heavier than 10. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select count(*) from pets where weight > 10",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets where weight > 10",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many pets have a greater weight than 10?",
        "context": "How many pets have a greater weight than 10? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select count(*) from pets where weight > 10",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select pet_age from pets order by pet_age asc limit 1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "context": "Find the weight of the youngest dog. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), pet_age, weight",
        "label": "pets_1 | select weight from pets order by pet_age limit 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select min(weight) from pets",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "How much does the youngest dog weigh?",
        "context": "How much does the youngest dog weigh? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), pet_age, weight",
        "label": "pets_1 | select weight from pets order by pet_age limit 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select max(weight), pettype from pets group by pettype",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "context": "Find the maximum weight for each type of pet. List the maximum weight and pet type. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select max(weight), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select max(weight), pettype from pets group by pettype",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "context": "List the maximum weight and type for each type of pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select max(weight), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.age > 20",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "context": "Find number of pets owned by students who are older than 20. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.age > 20",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "context": "How many pets are owned by students that have an age greater than 20? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.sex = 'F' and t1.pettype = 'dog'",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "context": "Find the number of dog pets that are raised by female students (with sex F). | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), pet_age, weight",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t1.sex = 'F' and t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.sex = \"F\" and t1.pettype = \"dog\"",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many dog pets are raised by female students?",
        "context": "How many dog pets are raised by female students? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog ), pet_age, weight",
        "label": "pets_1 | select count(*) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t1.sex = 'F' and t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(distinct pettype) from pets",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct type of pets.",
        "context": "Find the number of distinct type of pets. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select count(distinct pettype) from pets",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(distinct pettype) from pets",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "How many different types of pet are there?",
        "context": "How many different types of pet are there? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select count(distinct pettype) from pets",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = \"cat\" or t3.pettype = \"dog\"",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have cat or dog pet.",
        "context": "Find the first name of students who have cat or dog pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog, cat ), pet_age, weight",
        "label": "pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = \"cat\" or t3.pettype = \"dog\"",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "context": "What are the first names of every student who has a cat or dog as a pet? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog, cat ), pet_age, weight",
        "label": "pets_1 | select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = \"cat\" intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = \"dog\"",
        "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "question": "Find the first name of students who have both cat and dog pets .",
        "context": "Find the first name of students who have both cat and dog pets. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog, cat ), pet_age, weight",
        "label": "pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = 'dog'",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "context": "What are the students' first names who have both cats and dogs as pets? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog, cat ), pet_age, weight",
        "label": "pets_1 | select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select major, age from student except select t1.major, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.petid join pets as t3 on t2.petid = t3.petid where t3.pettype = \"cat\"",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a cat pet.",
        "context": "Find the major and age of students who do not have a cat pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), pet_age, weight",
        "label": "pets_1 | select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select major, age from student where stuid not in (select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = \"cat\")",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "context": "What major is every student who does not own a cat as a pet, and also how old are they? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), pet_age, weight",
        "label": "pets_1 | select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select stuid from student except select stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = \"cat\"",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "Find the id of students who do not have a cat pet.",
        "context": "Find the id of students who do not have a cat pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), pet_age, weight",
        "label": "pets_1 | select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select stuid from student where stuid not in (select stuid from has_pet where pettype = 'cat'",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "What are the ids of the students who do not own cats as pets?",
        "context": "What are the ids of the students who do not own cats as pets? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), pet_age, weight",
        "label": "pets_1 | select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select fname, age from student where stuid in (select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = \"dog\" except select t1.fname, t1.age from student as t1 join pets as t2 on t1.stuid = t2.petid where t2.pettype = \"cat\")",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "context": "Find the first name and age of students who have a dog but do not have a cat as a pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog, cat ), pet_age, weight",
        "label": "pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select fname from student where stuid in (select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = \"dog\" except select t1.fname from student as t1 join pets as t2 on t1.stuid = t2.petid where t2.pettype = \"cat\")",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "context": "What is the first name of every student who has a dog but does not have a cat? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( dog, cat ), pet_age, weight",
        "label": "pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select pettype, weight from pets order by pet_age asc limit 1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "context": "Find the type and weight of the youngest pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select pettype, weight from pets order by pet_age limit 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select pettype, weight from pets order by pet_age asc limit 1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "context": "What type of pet is the youngest animal, and how much does it weigh? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select pettype, weight from pets order by pet_age limit 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select petid, weight from pets where pet_age > 1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "context": "Find the id and weight of all pets whose age is older than 1. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select petid, weight from pets where pet_age > 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select petid, weight from pets where pet_age > 1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "context": "What is the id and weight of every pet who is older than 1? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select petid, weight from pets where pet_age > 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select pettype, avg(pet_age), max(pet_age) from pets group by pettype",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum age for each type of pet.",
        "context": "Find the average and maximum age for each type of pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select pettype, avg(pet_age), max(pet_age) from pets group by pettype",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average and maximum age for each pet type?",
        "context": "What is the average and maximum age for each pet type? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select pettype, avg(weight) from pets group by pettype",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet type.",
        "context": "Find the average weight for each pet type. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select avg(weight), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select pettype, avg(weight) from pets group by pettype",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "context": "What is the average weight for each type of pet? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select avg(weight), pettype from pets group by pettype",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t2.petid in (select t2.petid from has_pet as t3 join student as t4 on t3.stuid = t4.stuid)",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "Find the first name and age of students who have a pet.",
        "context": "Find the first name and age of students who have a pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different first names and ages of the students who do have pets?",
        "context": "What are the different first names and ages of the students who do have pets? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t2.petid from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.lname = 'Smith'",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "context": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t2.petid from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.lname = 'Smith'",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "context": "What is the id of the pet owned by the student whose last name is 'Smith'? | pets_1 | student : stuid, lname ( Smith ), fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select count(*), stuid from has_pet group by stuid",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "context": "Find the number of pets for each student who has any pet and student id. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select stuid, count(*) from has_pet group by stuid",
        "query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "context": "For students who have pets, how many pets does each student have? list their ids instead of names. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "context": "Find the first name and gender of student who have more than one pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "context": "What is the first name and gender of the all the students who have more than one pet? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = \"cat\" and t1.age = 3",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "context": "Find the last name of the student who has a cat that is age 3. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), pet_age, weight",
        "label": "pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pet_age = 3 and t3.pettype = 'cat'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pet_age = 3",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "context": "What is the last name of the student who has a cat that is 3 years old? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype ( cat ), pet_age, weight",
        "label": "pets_1 | select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pet_age = 3 and t3.pettype = 'cat'",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select 'average age' from student except select t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid",
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "Find the average age of students who do not have any pet .",
        "context": "Find the average age of students who do not have any pet. | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select avg(age) from student where stuid not in (select stuid from has_pet)",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "pets_1 | select avg(age) from student where stuid not in (select stuid from has_pet)",
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "What is the average age for all students who do not own any pets ?",
        "context": "What is the average age for all students who do not own any pets? | pets_1 | student : stuid, lname, fname, age, sex, major, advisor, city_code | has_pet : stuid foreign key student, petid foreign key pets | pets : petid, pettype, pet_age, weight",
        "label": "pets_1 | select avg(age) from student where stuid not in (select stuid from has_pet)",
        "db_id": "pets_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Student",
            "Has_Pet",
            "Pets"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "StuID",
                "LName",
                "Fname",
                "Age",
                "Sex",
                "Major",
                "Advisor",
                "city_code",
                "StuID",
                "PetID",
                "PetID",
                "PetType",
                "pet_age",
                "weight"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                10
            ],
            "other_column_id": [
                1,
                11
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "context": "How many continents are there? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from continents;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from continents",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "context": "What is the number of continents? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from continents;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent group by t1.continent",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "context": "How many countries does each continent have? List the continent id, continent name and the number of countries. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent group by t1.contid;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.contid, t1.countryname, count(*) from continents as",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "context": "For each continent, list its id, name, and how many countries it has? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.contid, t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent group by t1.contid;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries are listed?",
        "context": "How many countries are listed? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from countries;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from countries",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "context": "How many countries exist? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from countries;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.fullname, t1.maker, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.maker",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "context": "How many models does each car maker produce? List maker full name, id and the number. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "context": "What is the full name of each car maker, along with its id and how many models it produces? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid order by t1.horsepower limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the car has the minimum horsepower?",
        "context": "Which model of the car has the minimum horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid order by t1.horsepower limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "context": "What is the model of the car with the smallest amount of horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid where t1.weight < (select avg(weight) from cars_data)",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the car whose weight is below the average weight.",
        "context": "Find the model of the car whose weight is below the average weight. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.weight < (select avg(weight) from cars_data)",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid where t1.weight < (select avg(weight) from cars_data)",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the car with a weight smaller than the average?",
        "context": "What is the model for the car with a weight smaller than the average? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.weight < (select avg(weight) from cars_data)",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.maker from cars_data as t1 join model_list as t2 on t1.id = t2.modelid join car_makers as t3 on t2.maker = t3.id where t1.year = 1970",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "context": "Find the name of the makers that produced some cars in the year of 1970? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year = '1970';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t2.maker from cars_data as t1 join model_list as t2 on t1.id = t2.modelid where t1.year = 1970",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "context": "What is the name of the different car makers who produced a car in 1970? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year = '1970';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid order by t1.year limit 1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "context": "Find the make and production time of the cars that were produced in the earliest year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.maker, t2.year from car_makers as t1 join cars_data as t2 on t1.maker = t2.id order by t2.year limit 1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "context": "What is the maker of the carr produced in the earliest year and what year was it? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t2.model from cars_data as t1 join car_names as t2 on t1.id = t2.makeid join model_list as t3 on t2.model = t3.modelid where t1.year > 1980",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "Which distinct car models are the produced after 1980?",
        "context": "Which distinct car models are the produced after 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t2.model from cars_data as t1 join model_list as t2 on t1.model",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "What are the different models for the cards produced after 1980?",
        "context": "What are the different models for the cards produced after 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.continent, count(*) from continents as t1 join car_makers as t2 on t1.continent",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "context": "How many car makers are there in each continents? List the continent name and the count. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continent;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.continent, count(*) from continents as t1 join car_makers as t2 on t1.continent",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "context": "What is the name of each continent and how many car makers are there in each one? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.continent, count(*) from continents as t1 join countries as t2 on t1.contid = t2.continent join car_makers as t3 on t2.countryid = t3.country group by t1.continent;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t2.country order by count(*) desc limit 1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the countries has the most car makers? List the country name.",
        "context": "Which of the countries has the most car makers? List the country name. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t2.countryname from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid order by count(*) desc limit 1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the country with the most car makers?",
        "context": "What is the name of the country with the most car makers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t2.countryname from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*), t1.fullname from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.maker",
        "query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "context": "How many car models are produced by each maker? Only list the count and the maker full name. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*), t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*), t1.maker, t1.fullname from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.maker",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "context": "What is the number of car models that are produced by each maker and what is the id and full name of each maker? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*), t2.fullname, t2.id from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = \"aMC hornet sportabout (sw)\"",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "context": "What is the accelerate of the car make amc hornet sportabout (sw)? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( amc ), fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( amc ) foreign key car_names | car_names : makeid foreign key cars_data, model ( amc ) foreign key model_list, make ( amc hornet, amc hornet sportabout (sw) ) | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(t1.accelerate) from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = \"amc hornet sportabout (sw)\"",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "context": "How much does the car accelerate that makes amc hornet sportabout (sw)? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( amc ), fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( amc ) foreign key car_names | car_names : makeid foreign key cars_data, model ( amc ) foreign key model_list, make ( amc hornet, amc hornet sportabout (sw) ) | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers where country = \"france\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "How many car makers are there in france?",
        "context": "How many car makers are there in france? | car_1 | continents : contid, continent | countries : countryid, countryname ( france ), continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = 'france';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = \"France\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "What is the number of makers of care in France?",
        "context": "What is the number of makers of care in France? | car_1 | continents : contid, continent | countries : countryid, countryname ( france ), continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = 'france';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from countries where countryname = 'usa'",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many car models are produced in the usa?",
        "context": "How many car models are produced in the usa? | car_1 | continents : contid, continent | countries : countryid, countryname ( usa ), continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join countries as t3 on t2.country = t3.countryid where t3.countryname = 'usa';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id where t2.country = \"United States\"",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the car models produced in the United States?",
        "context": "What is the count of the car models produced in the United States? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join countries as t3 on t2.country = t3.countryid where t3.countryname = 'usa';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(mpg) from cars_data where cylinders = 4",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "context": "What is the average miles per gallon(mpg) of the cars with 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select avg(mpg) from cars_data where cylinders = 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(mpg) from cars_data where cylinders = 4",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "context": "What is the average miles per gallon of all the cards with 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select avg(mpg) from cars_data where cylinders = 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "context": "What is the smallest weight of the car produced with 8 cylinders on 1974? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "context": "What is the minimum weight of the car with 8 cylinders produced in 1974? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select maker, model from model_list",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are all the makers and models?",
        "context": "What are all the makers and models? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select maker, model from model_list;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select maker, model from model_list",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the makers and models?",
        "context": "What are the makers and models? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select maker, model from model_list;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the countries having at least one car maker? List name and id.",
        "context": "What are the countries having at least one car maker? List name and id. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname, t1.countryid from countries as t1 join car_makers as t3 on t1.countryid = t3.id group by t1.countryid having count(*) >= 1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "context": "What are the names and ids of all countries with at least one car maker? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) >= 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where horsepower > 150",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of the cars with horsepower more than 150?",
        "context": "What is the number of the cars with horsepower more than 150? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where horsepower > 150;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where horsepower > 150",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "context": "What is the number of cars with a horsepower greater than 150? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where horsepower > 150;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(weight), year from cars_data group by year",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight of cars each year?",
        "context": "What is the average weight of cars each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select avg(weight), year from cars_data group by year;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(weight), year from cars_data group by year",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "context": "What is the average weight and year for each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select avg(weight), year from cars_data group by year;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.country from car_makers as t1 join countries as t2 on t1.country = t2.countryid group by t1.country having count(*) >= 3",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "context": "Which countries in europe have at least 3 car manufacturers? | car_1 | continents : contid, continent ( europe ) | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.continent having count(*) >= 3",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "context": "What are the names of all European countries with at least 3 manufacturers? | car_1 | continents : contid, continent ( europe ) | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(horsepower), t1.make from car_names as t1 join cars_data as t2 on t1.make = t2.id where t2.cylinders = 3",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "context": "What is the maximum horsepower and the make of the car models with 3 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t2.horsepower, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(horsepower), t1.make from car_names as t1 join cars_data as t2 on t1.make = t2.id where t2.cylinders = 3",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "context": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t2.horsepower, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid order by t1.mpg desc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "context": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.model from cars_data as t1 join car_names as t2 on t1.id = t2.makeid order by t1.mpg desc limit 1",
        "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "question": "What is the car model with the highest mpg ?",
        "context": "What is the car model with the highest mpg? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(horsepower) from cars_data where year < 1980",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "question": "What is the average horsepower of the cars before 1980?",
        "context": "What is the average horsepower of the cars before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select avg(horsepower) from cars_data where year < 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(horsepower) from cars_data where year < 1980",
        "query": "select avg(horsepower) from cars_data where year  <  1980;",
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "context": "What is the average horsepower for all cars produced before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select avg(horsepower) from cars_data where year < 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(t1.edispl) from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = \"volvo\"",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl of the cars of model volvo?",
        "context": "What is the average edispl of the cars of model volvo? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( volvo ), fullname ( Volvo ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( volvo ) foreign key car_names | car_names : makeid foreign key cars_data, model ( volvo ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select avg(t1.edispl) from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = \"volvo\"",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl for all volvos?",
        "context": "What is the average edispl for all volvos? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( volvo ), fullname ( Volvo ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( volvo ) foreign key car_names | car_names : makeid foreign key cars_data, model ( volvo ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "context": "What is the maximum accelerate for different number of cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "context": "What is the maximum accelerate for all the different cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select max(accelerate), cylinders from cars_data group by cylinders;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from model_list group by model order by count(*) desc limit 1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of cars?",
        "context": "Which model has the most version(make) of cars? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from model_list group by model order by count(*) desc limit 1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "context": "What model has the most different versions? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "context": "How many cars have more than 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where cylinders > 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where cylinders > 4",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of cars with more than 4 cylinders?",
        "context": "What is the number of cars with more than 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where cylinders > 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where year = 1980",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "how many cars were produced in 1980?",
        "context": "how many cars were produced in 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where year = 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where year = 1980",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many cars were made?",
        "context": "In 1980, how many cars were made? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where year = 1980;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = \"American Motor Company\"",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "context": "How many car models were produced by the maker with full name American Motor Company? | car_1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname ( American Motor Company ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id where t2.fullname = \"American Motor Company\";",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "context": "What is the number of car models created by the car maker American Motor Company? | car_1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname ( American Motor Company ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "context": "Which makers designed more than 3 car models? List full name and the id. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.maker having count(*) > 3",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "context": "What are the names and ids of all makers with more than 3 models? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t2.model from car_makers as t1 join model_list as t2 on",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "context": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname ( General Motors ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t2.model from car_names as t1 join model_list as t2 on t1.makeid = t2.modelid join car_makers as t3 on t2.maker = t3.id where t3.fullname = \"General Motors\" or t1.",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "context": "What are the different models created by either the car maker General Motors or weighed more than 3500? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname ( General Motors ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select year from cars_data where weight <= 3000 and weight > 4000",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "context": "In which years cars were produced weighing no less than 3000 and no more than 4000? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "context": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select horsepower from cars_data order by accelerate desc limit 1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "context": "What is the horsepower of the car with the largest accelerate? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select horsepower from cars_data order by accelerate desc limit 1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "context": "What is the horsepower of the car with the greatest accelerate? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = \"volvo\" order by t1.accelerate limit 1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "context": "For model volvo, how many cylinders does the car with the least accelerate have? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( volvo ), fullname ( Volvo ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( volvo ) foreign key car_names | car_names : makeid foreign key cars_data, model ( volvo ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.cylinders from cars_data as t1 join model_list as t2 on t1.id = t2.modelid where t2.model = \"volvo\" order by t1.accelerate limit 1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "context": "For a volvo model, how many cylinders does the version with least accelerate have? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( volvo ), fullname ( Volvo ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( volvo ) foreign key car_names | car_names : makeid foreign key cars_data, model ( volvo ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where accelerate > (select max(horsepower) from cars_data)",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "context": "How many cars have a larger accelerate than the car with the largest horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where accelerate > (select max(horsepower) from cars_data)",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "context": "What is the number of cars with a greater accelerate than the one with the most horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where accelerate > ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers group by country having count(*) > 2",
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "How many countries has more than 2 car makers ?",
        "context": "How many countries has more than 2 car makers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from car_makers group by country having count(*) > 2",
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "What is the number of countries with more than 2 car makers ?",
        "context": "What is the number of countries with more than 2 car makers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "context": "How many cars has over 6 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where cylinders > 6;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select count(*) from cars_data where cylinders > 6",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "context": "What is the number of carsw ith over 6 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select count(*) from cars_data where cylinders > 6;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select model from car_names join cars_data on cars_data.id = cars_data.id where cylinders = 4 order by horsepower desc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "context": "For the cars with 4 cylinders, which model has the largest horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.model from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.cylinders = 4 order by t1.horsepower desc limit 1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "context": "For all of the 4 cylinder cars, which model has the most horsepower? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.makeid, t1.make from car_names as t1 join cars_data as t2 on t1.make = t2.id where t2.horsepower > (select min(horsepower) from cars_data) intersect select t1.make, t1.make from car_names as t1 join cars_data as t2 on t1.make = t2.id group by t1.makeid having count(*) > 3",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "context": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t2.makeid, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders <= 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t1.make, t1.",
        "query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "context": "Among the cars that do not have the minimum horsepower, what are the make ids and names of all those with less than 4 cylinders? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t2.makeid, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(mpg) from cars_data where cylinders = 8 union select max(mpg) from cars_data where year < 1980",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "context": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select max(mpg) from cars_data where cylinders = 8 union select max(mpg) from cars_data where year < 1980",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "context": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t2.model from cars_data as t1 join model_list as t2 on t1.model",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "context": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( ford ), fullname ( Ford Motor Company ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( ford ) foreign key car_names | car_names : makeid foreign key cars_data, model ( ford ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname!= 'Ford motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select distinct t2.model from cars_data as t1 join model_list as t2 on t1.model",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "context": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( ford ), fullname ( Ford Motor Company ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( ford ) foreign key car_names | car_names : makeid foreign key cars_data, model ( ford ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname!= 'Ford motor Company';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select countryname from countries where countryid not in (select country from car_makers)",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the name of the countries where there is not a single car maker?",
        "context": "What are the name of the countries where there is not a single car maker? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select countryname from countries where countryid not in (select country from car_makers)",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the names of the countries with no car makers?",
        "context": "What are the names of the countries with no car makers? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.modelid group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.modelid group by t1.maker having count(*) > 3",
        "query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "context": "Which are the car makers which produce at least 2 models and more than 3 car makers? List the id and the maker. | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.modelid group by t1.maker having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join car_names as t2 on t1.id = t2.makeid group by t1.maker having count(*) >= 3",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "context": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.id where t2.maker = \"fiat\" group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.id group by t1.countryid having count(*) > 3",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "context": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( fiat ), fullname ( Fiat ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( fiat ) foreign key car_names | car_names : makeid foreign key cars_data, model ( fiat ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.id group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join model_list as t2 on t1.countryid = t2.maker where t2.model = 'fiat'",
        "query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "context": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker ( fiat ), fullname ( Fiat ), country foreign key countries | model_list : modelid, maker foreign key car_makers, model ( fiat ) foreign key car_names | car_names : makeid foreign key cars_data, model ( fiat ) foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "label": "car_1 | select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
        "db_id": "car_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "continents",
            "countries",
            "car_makers",
            "model_list",
            "car_names",
            "cars_data"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ],
            "column_name": [
                "*",
                "ContId",
                "Continent",
                "CountryId",
                "CountryName",
                "Continent",
                "Id",
                "Maker",
                "FullName",
                "Country",
                "ModelId",
                "Maker",
                "Model",
                "MakeId",
                "Model",
                "Make",
                "Id",
                "MPG",
                "Cylinders",
                "Edispl",
                "Horsepower",
                "Weight",
                "Accelerate",
                "Year"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                9,
                11,
                14,
                16
            ],
            "other_column_id": [
                1,
                3,
                6,
                12,
                13
            ]
        }
    },
    {
        "prediction": "flight_2 | select country from airlines where airline = \"JetBlue Airways\"",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "context": "Which country does Airline \"JetBlue Airways\" belong to? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select country from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select country from airlines where airline = 'JetBlue Airways'",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What country is Jetblue Airways affiliated with?",
        "context": "What country is Jetblue Airways affiliated with? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select country from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "context": "What is the abbreviation of Airline \"JetBlue Airways\"? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "context": "Which abbreviation corresponds to Jetblue Airways? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline, abbreviation from airlines where country = 'USA'",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "context": "List all airline names and their abbreviations in \"USA\". | flight_2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airline, abbreviation from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline, abbreviation from airlines where country = 'USA'",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "context": "What are the airline names and abbreviations for airlines in the USA? | flight_2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airline, abbreviation from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode, airportname from airports where city = \"Anthony\"",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "context": "List the airport code and name in the city of Anthony. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airportcode, airportname from airports where city = \"Anthony\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportcode, airportname from airports where city = \"Anthony\"",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "context": "Give the airport code and airport name corresonding to the city Anthony. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airportcode, airportname from airports where city = \"Anthony\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "context": "How many airlines do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from airlines",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "context": "What is the total number of airlines? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from airlines",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "context": "How many airports do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from airports",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "context": "Return the number of airports. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from airports",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "How many flights do we have?",
        "context": "How many flights do we have? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "Return the number of flights.",
        "context": "Return the number of flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from airlines where abbreviation = 'UAL'",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "context": "Which airline has abbreviation 'UAL'? | flight_2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airline from airlines where abbreviation = \"UAL\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from airlines where abbreviation = 'UAL'",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "context": "Give the airline with abbreviation 'UAL'. | flight_2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airline from airlines where abbreviation = \"UAL\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines where country = 'USA'",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airlines are from USA?",
        "context": "How many airlines are from USA? | flight_2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines where country = 'USA'",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the USA.",
        "context": "Return the number of airlines in the USA. | flight_2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from airlines where country = \"USA\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "context": "Which city and country is the Alton airport at? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the city and country for the Alton airport.",
        "context": "Give the city and country for the Alton airport. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select city, country from airports where airportname = \"Alton\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where airportcode = 'AKO'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "context": "What is the airport name for airport 'AKO'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ) foreign key airports, destairport ( AKO ) foreign key airports",
        "label": "flight_2 | select airportname from airports where airportcode = \"AKO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where airportcode = 'AKO'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the airport with code 'AKO'.",
        "context": "Return the name of the airport with code 'AKO'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ) foreign key airports, destairport ( AKO ) foreign key airports",
        "label": "flight_2 | select airportname from airports where airportcode = \"AKO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where city = 'Aberdeen'",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are airport names at City 'Aberdeen'?",
        "context": "What are airport names at City 'Aberdeen'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airportname from airports where city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where city = \"Aberdeen\"",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of airports in Aberdeen?",
        "context": "What are the names of airports in Aberdeen? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airportname from airports where city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where sourceairport = 'APG'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "context": "How many flights depart from 'APG'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports",
        "label": "flight_2 | select count(*) from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights where sourceairport = 'APG'",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the number of flights departing from 'APG'.",
        "context": "Count the number of flights departing from 'APG'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports",
        "label": "flight_2 | select count(*) from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = destairport where t2.airportcode = \"ATO\"",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "context": "How many flights have destination ATO? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights where destairport = \"ATO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = destairport where t2.airportcode = \"ATO\"",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "Count the number of flights into ATO.",
        "context": "Count the number of flights into ATO. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights where destairport = \"ATO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City Aberdeen?",
        "context": "How many flights depart from City Aberdeen? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights departing from Aberdeen.",
        "context": "Return the number of flights departing from Aberdeen. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "context": "How many flights arriving in Aberdeen city? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights arriving in Aberdeen.",
        "context": "Return the number of flights arriving in Aberdeen. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen' and t1.airportname = 'Ashley'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "context": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen, Ashley ), airportcode, airportname ( Ashley ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode join airlines as t3 on t1.airline = t3.uid where t2.city = \"Aberdeen\" and t2.airportname = \"Ashley\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "context": "How many flights fly from Aberdeen to Ashley? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen, Ashley ), airportcode, airportname ( Ashley ), country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t1.airline = 'JetBlue Airways'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "context": "How many flights does airline 'JetBlue Airways' have? | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t1.airline = \"JetBlue Airways\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue Airways flights.",
        "context": "Give the number of Jetblue Airways flights. | flight_2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline join airports as t3 on t2.sourceairport = t3.airportcode where t3.airportcode = 'ASY' and t1.airline = 'United Airlines'",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "context": "How many 'United Airlines' flights go to Airport 'ASY'? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.destairport = \"ASY\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "context": "Count the number of United Airlines flights arriving in ASY Airport. | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.destairport = \"ASY\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'AHD' and t2.airline = 'United Airlines'",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "context": "How many 'United Airlines' flights depart from Airport 'AHD'? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\" and t2.airline = \"United Airlines\"",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "context": "Return the number of United Airlines flights leaving from AHD Airport. | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports",
        "label": "flight_2 | select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode join airlines as t3 on t1.airline = t3.uid where t2.city = 'Aberdeen' and t3.abbreviation = 'United Airlines'",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "context": "How many United Airlines flights go to City 'Aberdeen'? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"United Airlines\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode join airlines as t3 on t1.airline = t3.uid where t2.city = \"Aberdeen\" and t3.airline = \"United Airlines\"",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "context": "Count the number of United Airlines flights that arrive in Aberdeen. | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"United Airlines\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of arriving flights?",
        "context": "Which city has most number of arriving flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select city from airports group by city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most frequent destination airport?",
        "context": "Which city has the most frequent destination airport? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t2.sourceairport order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of departing flights?",
        "context": "Which city has most number of departing flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city is the most frequent source airport?",
        "context": "Which city is the most frequent source airport? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t2.airportcode from flights as t1 join airports as t2 on t1.sourceairport = destairport group by t1.sourceairport order by count(*) desc limit 1",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of airport that has the highest number of flights?",
        "context": "What is the code of airport that has the highest number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.AirportCode = t2.sourceairport group by t2.sourceairport order by count(*) desc limit 1",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the airport code of the airport with the most flights?",
        "context": "What is the airport code of the airport with the most flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airport",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of airport that has fewest number of flights?",
        "context": "What is the code of airport that has fewest number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airport",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the airport with the least flights.",
        "context": "Give the code of the airport with the least flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.destairport or t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from flights group by airline order by count(*) desc limit 1",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airline has most number of flights?",
        "context": "Which airline has most number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airline serves the most flights?",
        "context": "What airline serves the most flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t2.airline order by count(*) limit 1",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "context": "Find the abbreviation and country of the airline that has fewest number of flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.uid order by count(*) limit 1",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "context": "What is the abbreviation of the airilne has the fewest flights and what country is it in? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "context": "What are airlines that have some flight departing from airport 'AHD'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with source airport AHD?",
        "context": "Which airlines have a flight with source airport AHD? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'AHD'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "context": "What are airlines that have flights arriving at airport 'AHD'? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.flightno where t2.sourceairport = \"AHD\"",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with destination airport AHD?",
        "context": "Which airlines have a flight with destination airport AHD? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ) foreign key airports, destairport ( AHD ) foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = \"AHD\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG' intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "context": "Find all airlines that have flights from both airports 'APG' and 'CVO'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ) foreign key airports, destairport ( APG, CVO ) foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG' intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "context": "Which airlines have departing flights from both APG and CVO airports? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ) foreign key airports, destairport ( APG, CVO ) foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO' except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG'",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "context": "Find all airlines that have flights from airport 'CVO' but not from 'APG'. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ) foreign key airports, destairport ( APG, CVO ) foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\"",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "context": "Which airlines have departures from CVO but not from APG airports? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ) foreign key airports, destairport ( APG, CVO ) foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) >= 10",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airlines that have at least 10 flights.",
        "context": "Find all airlines that have at least 10 flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) > 10",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) >= 10",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Which airlines have at least 10 flights?",
        "context": "Which airlines have at least 10 flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) > 10",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from flights group by airline having count(*) < 200",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "context": "Find all airlines that have fewer than 200 flights. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airline from flights group by airline having count(*) < 200",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Which airlines have less than 200 flights?",
        "context": "Which airlines have less than 200 flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.flightno from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = \"United Airlines\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "context": "What are flight numbers of Airline \"United Airlines\"? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.flightno from flights as t1 join airlines as t2 on t2.uid = t1.airline where t2.airline = \"United Airlines\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.flightno from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = \"United Airlines\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "context": "Which flight numbers correspond to United Airlines flights? | flight_2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.flightno from flights as t1 join airlines as t2 on t2.uid = t1.airline where t2.airline = \"United Airlines\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "context": "What are flight numbers of flights departing from Airport \"APG\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports",
        "label": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "context": "Give the flight numbers of flights leaving from APG. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports",
        "label": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "context": "What are flight numbers of flights arriving at Airport \"APG\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports",
        "label": "flight_2 | select flightno from flights where destairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select flightno from flights where sourceairport = \"APG\"",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "context": "Give the flight numbers of flights landing at APG. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ) foreign key airports, destairport ( APG ) foreign key airports",
        "label": "flight_2 | select flightno from flights where destairport = \"APG\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "context": "What are flight numbers of flights departing from City \"Aberdeen \"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "context": "Give the flight numbers of flights leaving from Aberdeen. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "context": "What are flight numbers of flights arriving at City \"Aberdeen\"? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode join airports as t3 on t2.airportcode = t3.airportcode where t3.city = \"Aberdeen\"",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "context": "Give the flight numbers of flights arriving in Aberdeen. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select t1.flightno from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "context": "Find the number of flights landing in the city of Aberdeen or Abilene. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen, Abilene ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = \"Aberdeen\" or t1.city = \"Abilene\"",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "How many flights land in Aberdeen or Abilene?",
        "context": "How many flights land in Aberdeen or Abilene? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen, Abilene ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where airportcode not in (select sourceairport, destairport from flights)",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of airports which do not have any flight in and out.",
        "context": "Find the name of airports which do not have any flight in and out. | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "flight_2 | select airportname from airports where city not in (select sourceairport from flights) or city not in (select destairport from flights)",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which airports do not have departing or arriving flights?",
        "context": "Which airports do not have departing or arriving flights? | flight_2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport foreign key airports, destairport foreign key airports",
        "label": "flight_2 | select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "airlines",
            "airports",
            "flights"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "uid",
                "Airline",
                "Abbreviation",
                "Country",
                "City",
                "AirportCode",
                "AirportName",
                "Country",
                "CountryAbbrev",
                "Airline",
                "FlightNo",
                "SourceAirport",
                "DestAirport"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                13,
                12
            ],
            "other_column_id": [
                6,
                6
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(*) from employee",
        "query": "SELECT count(*) FROM employee",
        "question": "How many employees are there?",
        "context": "How many employees are there? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(*) from employee",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(*) from employee",
        "query": "SELECT count(*) FROM employee",
        "question": "Count the number of employees",
        "context": "Count the number of employees | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(*) from employee",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from employee order by age asc",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "Sort employee names by their age in ascending order.",
        "context": "Sort employee names by their age in ascending order. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name from employee order by age",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from employee order by age asc",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "List the names of employees and sort in ascending order of age.",
        "context": "List the names of employees and sort in ascending order of age. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name from employee order by age",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select city, count(*) from employee group by city",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "What is the number of employees from each city?",
        "context": "What is the number of employees from each city? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(*), city from employee group by city",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select city, count(*) from employee group by city",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "Count the number of employees for each city.",
        "context": "Count the number of employees for each city. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(*), city from employee group by city",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select city from employee where age < 30 group by city having count(*) > 1",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which cities do more than one employee under age 30 come from?",
        "context": "Which cities do more than one employee under age 30 come from? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select city from employee where age < 30 group by city having count(*) > 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select city from employee where age < 30 group by city having count(*) > 1",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the cities that have more than one employee under age 30.",
        "context": "Find the cities that have more than one employee under age 30. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select city from employee where age < 30 group by city having count(*) > 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select location, count(*) from shop group by location",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "Find the number of shops in each location.",
        "context": "Find the number of shops in each location. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(*), location from shop group by location",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select location, count(*) from shop group by location",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "How many shops are there in each location?",
        "context": "How many shops are there in each location? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(*), location from shop group by location",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select manager_name, district from shop order by number_products desc limit 1",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "context": "Find the manager name and district of the shop whose number of products is the largest. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select manager_name, district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select manager_name, district from shop order by number_products desc limit 1",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "context": "What are the manager name and district of the shop that sells the largest number of products? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select manager_name, district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select min(number_products), max(number_products) from shop",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of products of all stores.",
        "context": "find the minimum and maximum number of products of all stores. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select min(number_products), max(number_products) from shop",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select min(number_products), max(number_products) from shop",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "context": "What are the minimum and maximum number of products across all the shops? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select min(number_products), max(number_products) from shop",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name, location, district from shop order by number_products desc",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "context": "Return the name, location and district of all shops in descending order of number of products. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name, location, district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name, location, district from shop order by number_products desc",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "context": "Sort all the shops by number products in descending order, and return the name, location and district of each shop. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name, location, district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop where number_products > (select avg(number_products) from shop)",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "context": "Find the names of stores whose number products is more than the average number of products. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name from shop where number_products > (select avg(number_products) from shop)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop where number_products > (select avg(number_products) from shop)",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "context": "Which shops' number products is above the average? Give me the shop names. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name from shop where number_products > (select avg(number_products) from shop)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t2.employee_id order by count(*) desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "context": "find the name of employee who was awarded the most times in the evaluation. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t2.employee_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t2.employee_id order by sum(t2.bonus) desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "context": "Which employee received the most awards in evaluations? Give me the employee name. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t2.employee_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "context": "Find the name of the employee who got the highest one time bonus. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "context": "Which employee received the biggest bonus? Give me the employee name. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from employee where employee_id not in (select employee_id from evaluation)",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "context": "Find the names of employees who never won any award in the evaluation. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name from employee where employee_id not in (select employee_id from evaluation)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from employee where employee_id not in (select employee_id from evaluation)",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "What are the names of the employees who never received any evaluation?",
        "context": "What are the names of the employees who never received any evaluation? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name from employee where employee_id not in (select employee_id from evaluation)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "context": "What is the name of the shop that is hiring the largest number of employees? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which shop has the most employees? Give me the shop name.",
        "context": "Which shop has the most employees? Give me the shop name. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop where shop_id not in (select shop_id from hiring)",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the shops that do not hire any employee.",
        "context": "Find the name of the shops that do not hire any employee. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name from shop where shop_id not in (select shop_id from hiring)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select name from shop where shop_id not in (select shop_id from hiring)",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Which shops run with no employees? Find the shop names",
        "context": "Which shops run with no employees? Find the shop names | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select name from shop where shop_id not in (select shop_id from hiring)",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name, count(*) from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "context": "Find the number of employees hired in each shop; show the shop name as well. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(*), t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select t2.name, count(*) from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "context": "For each shop, return the number of employees working there and the name of the shop. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(*), t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select sum(bonus) from evaluation",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "What is total bonus given in all evaluations?",
        "context": "What is total bonus given in all evaluations? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select sum(bonus) from evaluation",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select sum(bonus) from evaluation",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "Find the total amount of bonus given in all the evaluations.",
        "context": "Find the total amount of bonus given in all the evaluations. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select sum(bonus) from evaluation",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select * from hiring",
        "query": "SELECT * FROM hiring",
        "question": "Give me all the information about hiring.",
        "context": "Give me all the information about hiring. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select * from hiring",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select * from hiring",
        "query": "SELECT * FROM hiring",
        "question": "What is all the information about hiring?",
        "context": "What is all the information about hiring? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select * from hiring",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "context": "Which district has both stores with less than 3000 products and stores with more than 10000 products? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "context": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(distinct location) from shop",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "How many different store locations are there?",
        "context": "How many different store locations are there? | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(distinct location) from shop",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "employee_hire_evaluation | select count(distinct location) from shop",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "Count the number of distinct store locations.",
        "context": "Count the number of distinct store locations. | employee_hire_evaluation | employee : employee_id foreign key hiring, name, age, city | shop : shop_id, name, location, district, number_products, manager_name | hiring : shop_id foreign key shop, employee_id foreign key employee, start_from, is_full_time | evaluation : employee_id foreign key employee, year_awarded, bonus",
        "label": "employee_hire_evaluation | select count(distinct location) from shop",
        "db_id": "employee_hire_evaluation",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "employee",
            "shop",
            "hiring",
            "evaluation"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Employee_ID",
                "Name",
                "Age",
                "City",
                "Shop_ID",
                "Name",
                "Location",
                "District",
                "Number_products",
                "Manager_name",
                "Shop_ID",
                "Employee_ID",
                "Start_from",
                "Is_full_time",
                "Employee_ID",
                "Year_awarded",
                "Bonus"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                12,
                11,
                15
            ],
            "other_column_id": [
                1,
                5,
                1
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "context": "How many documents do we have? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from documents",
        "query": "SELECT count(*) FROM Documents",
        "question": "Count the number of documents.",
        "context": "Count the number of documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "context": "List document IDs, document names, and document descriptions for all documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "What are the ids, names, and descriptions for all documents?",
        "context": "What are the ids, names, and descriptions for all documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id, document_name, document_description from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_name, template_id from documents where document_description like '%w%'",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "context": "What is the document name and template id for document with description with the letter 'w' in it? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_name, template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_name, template_id from documents where document_description like '%w%'",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "context": "Return the names and template ids for documents that contain the letter w in their description. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_name, template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "context": "What is the document id, template id and description for document named \"Robbin CV\"? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Robbin CV ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "context": "Return the document id, template id, and description for the document with the name Robbin CV. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Robbin CV ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "context": "How many different templates do all document use? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different templates used for documents.",
        "context": "Count the number of different templates used for documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(distinct template_id) from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = 'PPT'",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the template with type code 'PPT'?",
        "context": "How many documents are using the template with type code 'PPT'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ), template_type_description | templates : template_id, version_number, template_type_code ( PPT ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = \"PPT\"",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "context": "Count the number of documents that use the PPT template type. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT ), template_type_description | templates : template_id, version_number, template_type_code ( PPT ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id, count(*) from documents group by template_id",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and number of documents using each template.",
        "context": "Show all template ids and number of documents using each template. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id, count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id, count(*) from documents group by template_id",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "context": "What are all different template ids used for documents, and how many times were each of them used? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id, count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.template_id, t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and type code for the template used by the most documents?",
        "context": "What is the id and type code for the template used by the most documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.template_id, t2.template_type_code from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.template_id, t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "context": "Return the id and type code of the template that is used for the greatest number of documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.template_id, t2.template_type_code from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "context": "Show ids for all templates that are used by more than one document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "context": "What are the template ids of any templates used in more than a single document? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id from documents group by template_id having count(*) > 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any document.",
        "context": "Show ids for all templates not used by any document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for templates that are not used in any documents?",
        "context": "What are the ids for templates that are not used in any documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id from templates except select template_id from documents",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "How many templates do we have?",
        "context": "How many templates do we have? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates",
        "query": "SELECT count(*) FROM Templates",
        "question": "Count the number of templates.",
        "context": "Count the number of templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id, version_number, template_type_code from templates",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "context": "Show template ids, version numbers, and template type codes for all templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id, version_number, template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id, version_number, template_type_code from templates",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "context": "What are the ids, version numbers, and type codes for each template? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id, version_number, template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct template_type_code from templates",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "Show all distinct template type codes for all templates.",
        "context": "Show all distinct template type codes for all templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select distinct template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct template_type_code from templates",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different template type codes?",
        "context": "What are the different template type codes? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select distinct template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PP\"",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "context": "What are the ids of templates with template type code PP or PPT? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PP\"",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "context": "Return the ids of templates that have the code PP or PPT. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( PPT, PP ), template_type_description | templates : template_id, version_number, template_type_code ( PPT, PP ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"CV\"",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "How many templates have template type code CV?",
        "context": "How many templates have template type code CV? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"CV\"",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Count the number of templates of the type CV.",
        "context": "Count the number of templates of the type CV. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( CV ), template_type_description ( CV ) | templates : template_id, version_number, template_type_code ( CV ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from templates where template_type_code = \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select version_number, template_type_code from templates where version_number > 5",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "context": "What is the version number and template type code for the template with version number later than 5? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select version_number, template_type_code from templates where version_number > 5",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select version_number, template_type_code from templates where version_number > 5",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "context": "Return the version numbers and template type codes of templates with a version number greater than 5. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select version_number, template_type_code from templates where version_number > 5",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, count(*) from templates group by template_type_code",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all template type codes and number of templates for each.",
        "context": "Show all template type codes and number of templates for each. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code, count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, count(*) from templates group by template_type_code",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "context": "What are the different template type codes, and how many templates correspond to each? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code, count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code has most number of templates?",
        "context": "Which template type code has most number of templates? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "context": "Return the type code of the template type that the most templates belong to. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code having count(*) < 3",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all template type codes with less than three templates.",
        "context": "Show all template type codes with less than three templates. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code having count(*) < 3",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code having count(*) < 3",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "context": "What are the codes of template types that have fewer than 3 templates? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code having count(*) < 3",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select version_number, template_type_code from templates order by version_number asc limit 1",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "What the smallest version number and its template type code?",
        "context": "What the smallest version number and its template type code? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select min(version_number), template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select version_number, template_type_code from templates order by version_number asc limit 1",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "context": "Return the lowest version number, along with its corresponding template type code. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select min(version_number), template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "context": "What is the template type code of the template used by document with the name \"Data base\"? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "context": "Return the template type code of the template that is used by a document named Data base. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Data base ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_name from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = \"BK\"",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Show all document names using templates with template type code BK.",
        "context": "Show all document names using templates with template type code BK. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ), template_type_description | templates : template_id, version_number, template_type_code ( BK ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t2.document_name from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = \"BK\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_name from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = \"BK\"",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "What are the names of documents that use templates with the code BK?",
        "context": "What are the names of documents that use templates with the code BK? | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( BK ), template_type_description | templates : template_id, version_number, template_type_code ( BK ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t2.document_name from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = \"BK\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, count(*) from templates group by template_type_code",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all template type codes and the number of documents using each type.",
        "context": "Show all template type codes and the number of documents using each type. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, count(*) from templates group by template_type_code",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "What are the different template type codes, and how many documents use each type?",
        "context": "What are the different template type codes, and how many documents use each type? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "context": "Which template type code is used by most number of documents? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "context": "Return the code of the template type that is most commonly used in documents. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates except select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "Show all template type codes that are not used by any document.",
        "context": "Show all template type codes that are not used by any document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from templates except select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "What are the codes of template types that are not used for any document?",
        "context": "What are the codes of template types that are not used for any document? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all template type codes and descriptions.",
        "context": "Show all template type codes and descriptions. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type codes and descriptions for all template types?",
        "context": "What are the type codes and descriptions for all template types? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code, template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "context": "What is the template type descriptions for template type code \"AD\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ), template_type_description | templates : template_id, version_number, template_type_code ( AD ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "Return the template type description of the template type with the code AD.",
        "context": "Return the template type description of the template type with the code AD. | cre_Doc_Template_Mgt | ref_template_types : template_type_code ( AD ), template_type_description | templates : template_id, version_number, template_type_code ( AD ) foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the template type code for template type description \"Book\".",
        "context": "What is the template type code for template type description \"Book\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Book ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type code of the template type with the description \"Book\".",
        "context": "Return the type code of the template type with the description \"Book\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Book ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "context": "What are the distinct template type descriptions for the templates ever used by any document? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "context": "Return the different descriptions for templates that have been used in a document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_description = \"Presentation\"",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the template ids with template type description \"Presentation\".",
        "context": "What are the template ids with template type description \"Presentation\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_description = \"Presentation\"",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "context": "Return the ids corresponding to templates with the description 'Presentation'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description ( Presentation ) | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from paragraphs",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "How many paragraphs in total?",
        "context": "How many paragraphs in total? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from paragraphs",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from paragraphs",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "Count the number of paragraphs.",
        "context": "Count the number of paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from paragraphs",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = \"Summer Show\"",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "context": "How many paragraphs for the document with name 'Summer Show'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Summer Show ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Summer Show\"",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "context": "Count the number of paragraphs in the document named 'Summer Show'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Summer Show ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select other_details from paragraphs where paragraph_text = 'Korea'",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "context": "Show paragraph details for paragraph with text 'Korea '. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text ( Korea ), other_details",
        "label": "cre_Doc_Template_Mgt | select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select other_details from paragraphs where paragraph_text like '%korea%'",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "context": "What are the details for the paragraph that includes the text 'Korea '? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text ( Korea ), other_details",
        "label": "cre_Doc_Template_Mgt | select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t2.paragraph_id, t2.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = \"Welcome to NY\"",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "context": "Show all paragraph ids and texts for the document with name 'Welcome to NY'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Welcome to NY ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t2.paragraph_id, t2.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = \"Welcome to NY\"",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "context": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Welcome to NY ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t2.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = \"Customer reviews\"",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "context": "Show all paragraph texts for the document \"Customer reviews\". | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Customer reviews ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t2.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = \"Customer reviews\"",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "context": "What are the paragraph texts for the document with the name 'Customer reviews'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name ( Customer reviews ), document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, count(*) from paragraphs group by document_id order by document_id",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "context": "Show all document ids and the number of paragraphs in each document. Order by document id. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id, count(*) from paragraphs group by document_id order by document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id, count(*) from paragraphs group by document_id order by document_id",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "context": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id, count(*) from paragraphs group by document_id order by document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "context": "Show all document ids, names and the number of paragraphs in each document. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.document_id, t2.document_name, count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "context": "What are the ids and names of each document, as well as the number of paragraphs in each? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.document_id, t2.document_name, count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) >= 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all document ids with at least two paragraphs.",
        "context": "List all document ids with at least two paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) >= 2",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) >= 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "context": "What are the ids of documents that have 2 or more paragraphs? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) >= 2",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "context": "What is the document id and name with greatest number of paragraphs? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.document_id, t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "context": "Return the id and name of the document with the most paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select t1.document_id, t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "context": "What is the document id with least number of paragraphs? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "context": "Return the id of the document with the fewest paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "context": "What is the document id with 1 to 2 paragraphs? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "context": "Give the ids of documents that have between one and two paragraphs. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text, other_details",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "context": "Show the document id with paragraph text 'Brazil' and 'Ireland'. | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text ( Ireland, Brazil ), other_details",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "cre_Doc_Template_Mgt | select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "context": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? | cre_Doc_Template_Mgt | ref_template_types : template_type_code, template_type_description | templates : template_id, version_number, template_type_code foreign key ref_template_types, date_effective_from, date_effective_to, template_details | documents : document_id, template_id foreign key templates, document_name, document_description, other_details | paragraphs : paragraph_id, document_id foreign key documents, paragraph_text ( Ireland, Brazil ), other_details",
        "label": "cre_Doc_Template_Mgt | select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
        "db_id": "cre_Doc_Template_Mgt",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Template_Types",
            "Templates",
            "Documents",
            "Paragraphs"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Template_Type_Code",
                "Template_Type_Description",
                "Template_ID",
                "Version_Number",
                "Template_Type_Code",
                "Date_Effective_From",
                "Date_Effective_To",
                "Template_Details",
                "Document_ID",
                "Template_ID",
                "Document_Name",
                "Document_Description",
                "Other_Details",
                "Paragraph_ID",
                "Document_ID",
                "Paragraph_Text",
                "Other_Details"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                10,
                15
            ],
            "other_column_id": [
                1,
                3,
                9
            ]
        }
    },
    {
        "prediction": "course_teach | select count(*) from teacher",
        "query": "SELECT count(*) FROM teacher",
        "question": "How many teachers are there?",
        "context": "How many teachers are there? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select count(*) from teacher",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select count(*) from teacher",
        "query": "SELECT count(*) FROM teacher",
        "question": "What is the total count of teachers?",
        "context": "What is the total count of teachers? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select count(*) from teacher",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher order by age asc",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "context": "List the names of teachers in ascending order of age. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select name from teacher order by age asc",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher order by age asc",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "context": "What are the names of the teachers ordered by ascending age? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select name from teacher order by age asc",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select age, hometown from teacher",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What are the age and hometown of teachers?",
        "context": "What are the age and hometown of teachers? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select age, hometown from teacher",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select age, hometown from teacher",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and hometown of every teacher?",
        "context": "What is the age and hometown of every teacher? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select age, hometown from teacher",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where hometown!= 'Little lever urban District'",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "context": "List the name of teachers whose hometown is not  Little Lever Urban District ''. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown ( Little Lever Urban District ) | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select name from teacher where hometown!= \"little lever urban district\"",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where hometown!= 'Little lever urban District'",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "context": "What are the names of the teachers whose hometown is not  Little Lever Urban District ''? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown ( Little Lever Urban District ) | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select name from teacher where hometown!= \"little lever urban district\"",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where age = 32 or age = 33",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of teachers aged either 32 or 33?",
        "context": "Show the name of teachers aged either 32 or 33? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select name from teacher where age = 32 or age = 33",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where age = 32 or age = 33",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "context": "What are the names of the teachers who are aged either 32 or 33? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select name from teacher where age = 32 or age = 33",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher order by age asc limit 1",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "context": "What is the hometown of the youngest teacher? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher order by age asc limit 1",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "Where is the youngest teacher from?",
        "context": "Where is the youngest teacher from? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown, count(*) from teacher group by hometown",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "context": "Show different hometown of teachers and the number of teachers from each hometown. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select hometown, count(*) from teacher group by hometown",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown, count(*) from teacher group by hometown",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "For each hometown, how many teachers are there?",
        "context": "For each hometown, how many teachers are there? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select hometown, count(*) from teacher group by hometown",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher group by hometown order by count(*) desc limit 1",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common hometown of teachers.",
        "context": "List the most common hometown of teachers. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select hometown from teacher group by hometown order by count(*) desc limit 1",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher group by hometown order by count(*) desc limit 1",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most commmon hometowns for teachers?",
        "context": "What is the most commmon hometowns for teachers? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select hometown from teacher group by hometown order by count(*) desc limit 1",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher group by hometown having count(*) >= 2",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "Show the hometowns shared by at least two teachers.",
        "context": "Show the hometowns shared by at least two teachers. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select hometown from teacher group by hometown having count(*) >= 2",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select hometown from teacher group by hometown having count(*) >= 2",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "What are the towns from which at least two teachers come from?",
        "context": "What are the towns from which at least two teachers come from? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select hometown from teacher group by hometown having count(*) >= 2",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, t1.course_id from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "context": "Show names of teachers and the courses they are arranged to teach. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "What is the name of each teacher and what course they teach?",
        "context": "What is the name of each teacher and what course they teach? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id order by t2.name asc",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "context": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id order by t3.name",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id order by t2.name",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "context": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t3.name, t2.course from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id order by t3.name",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t3.course = 'Math'",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "Show the name of the teacher for the math course.",
        "context": "Show the name of the teacher for the math course. | course_teach | course : course_id foreign key course_arrange, staring_date, course ( Math ) | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t3.name from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id where t2.course = \"Math\"",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t3.course = 'Math'",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "What are the names of the people who teach math courses?",
        "context": "What are the names of the people who teach math courses? | course_teach | course : course_id foreign key course_arrange, staring_date, course ( Math ) | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t3.name from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id where t2.course = \"Math\"",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "Show names of teachers and the number of courses they teach.",
        "context": "Show names of teachers and the number of courses they teach. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "context": "What are the names of the teachers and how many courses do they teach? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of teachers that teach at least two courses.",
        "context": "Show names of teachers that teach at least two courses. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "What are the names of the teachers who teach at least two courses?",
        "context": "What are the names of the teachers who teach at least two courses? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "context": "List the names of teachers who have not been arranged to teach courses. | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "course_teach | select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "context": "What are the names of the teachers whose courses have not been arranged? | course_teach | course : course_id foreign key course_arrange, staring_date, course | teacher : teacher_id, name, age, hometown | course_arrange : course_id foreign key course, teacher_id foreign key teacher, grade",
        "label": "course_teach | select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "db_id": "course_teach",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "course",
            "teacher",
            "course_arrange"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Course_ID",
                "Staring_Date",
                "Course",
                "Teacher_ID",
                "Name",
                "Age",
                "Hometown",
                "Course_ID",
                "Teacher_ID",
                "Grade"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                9,
                8
            ],
            "other_column_id": [
                4,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select count(*) from visitor where age < 30",
        "query": "SELECT count(*) FROM visitor WHERE age  <  30",
        "question": "How many visitors below age 30 are there?",
        "context": "How many visitors below age 30 are there? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select count(*) from visitor where age < 30",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "context": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select avg(age) from visitor where level_of_membership <= 4",
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "context": "What is the average age of the visitors whose membership level is not higher than 4? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select avg(age) from visitor where level_of_membership <= 4",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "context": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t1.museum_id order by sum(t1.num_of_staff) desc limit 1",
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "question": "Find the id and name of the museum that has the most staff members?",
        "context": "Find the id and name of the museum that has the most staff members? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select museum_id, name from museum order by num_of_staff desc limit 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select avg(num_of_staff) from museum where open_year < 2009",
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "context": "Find the average number of staff working for the museums that were open before 2009. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select avg(num_of_staff) from museum where open_year < 2009",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select open_year, num_of_staff from museum where name = 'Plaza Museum'",
        "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "context": "What are the opening year and staff number of the museum named Plaza Museum? | museum_visit | museum : museum_id foreign key visit, name ( Plaza Museum ), num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select num_of_staff, open_year from museum where name = 'Plaza Museum'",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year > 2010)",
        "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "context": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year > 2010)",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.id, t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id having count(*) > 1",
        "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "context": "find the id, name and age for visitors who visited some museums more than once. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select t1.id, t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id having count(*) > 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.id, t1.name, t1.level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id order by total_spent desc limit 1",
        "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "context": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select t2.visitor_id, t1.name, t1.level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t1.museum_id order by count(*) desc limit 1",
        "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the museum visited most times?",
        "context": "What are the id and name of the museum visited most times? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select t2.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t2.museum_id order by count(*) desc limit 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select name from museum where museum_id not in (select museum_id from visit)",
        "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "question": "What is the name of the museum that had no visitor yet?",
        "context": "What is the name of the museum that had no visitor yet? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select name from museum where museum_id not in (select museum_id from visit)",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by sum(t2.num_of_ticket) desc limit 1",
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "context": "Find the name and age of the visitor who bought the most tickets at once. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id order by t2.num_of_ticket desc limit 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select avg(num_of_ticket), max(num_of_ticket) from visit",
        "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "context": "What are the average and maximum number of tickets bought in all visits? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select avg(num_of_ticket), max(num_of_ticket) from visit",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t1.level_of_membership = 1",
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "context": "What is the total ticket expense of the visitors whose membership level is 1? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t1.level_of_membership = 1",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select t2.name from visit as t1 join visitor as t2 on t1.visitor_id = t2.id join museum as t3 on t1.museum_id = t3.museum_id where t3.open_year < 2009 intersect select t2.name from visit as t1 join visitor as t2 on t1.visitor_id = t2.id join museum as t3 on t1.museum_id = t3.museum_id where t3.open_year > 2011",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "context": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t3.museum_id = t2.museum_id where t3.open_year < 2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t3.museum_id = t2.museum_id where t3.open_year > 2011",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select count(*) from visitor where id not in ( select visitor_id from visit where open_year > 2010 ",
        "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "context": "Find the number of visitors who did not visit any museum opened after 2010. | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select count(*) from visitor where id not in (select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id where t1.open_year > 2010)",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "museum_visit | select count(*) from museum where open_year > 2013 or open_year < 2008",
        "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "question": "How many museums were opened after 2013 or before 2008?",
        "context": "How many museums were opened after 2013 or before 2008? | museum_visit | museum : museum_id foreign key visit, name, num_of_staff, open_year | visitor : id, name, level_of_membership, age | visit : museum_id foreign key museum, visitor_id foreign key visitor, num_of_ticket, total_spent",
        "label": "museum_visit | select count(*) from museum where open_year > 2013 or open_year < 2008",
        "db_id": "museum_visit",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "museum",
            "visitor",
            "visit"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "Museum_ID",
                "Name",
                "Num_of_Staff",
                "Open_Year",
                "ID",
                "Name",
                "Level_of_membership",
                "Age",
                "Museum_ID",
                "visitor_ID",
                "Num_of_Ticket",
                "Total_spent"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                10,
                9
            ],
            "other_column_id": [
                5,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from players",
        "query": "SELECT count(*) FROM players",
        "question": "Find the total number of players.",
        "context": "Find the total number of players. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from players",
        "query": "SELECT count(*) FROM players",
        "question": "How many players are there?",
        "context": "How many players are there? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches",
        "query": "SELECT count(*) FROM matches",
        "question": "Find the total number of matches.",
        "context": "Find the total number of matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches",
        "query": "SELECT count(*) FROM matches",
        "question": "Count the number of matches.",
        "context": "Count the number of matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, birth_date from players where country_code = 'USA'",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "context": "List the first name and birth date of all players from the country with code USA. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code ( USA ) | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc ( USA ), loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc ( USA ), winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, birth_date from players where country_code = 'USA'",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "What are the first names and birth dates of players from the USA?",
        "context": "What are the first names and birth dates of players from the USA? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code ( USA ) | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc ( USA ), loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc ( USA ), winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(loser_age), avg(winner_age) from matches",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average age of losers and winners of all matches.",
        "context": "Find the average age of losers and winners of all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select avg(loser_age), avg(winner_age) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(loser_age), avg(winner_age) from matches",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "What are the average ages of losers and winners across matches?",
        "context": "What are the average ages of losers and winners across matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select avg(loser_age), avg(winner_age) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(winner_rank) from matches",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "Find the average rank of winners in all matches.",
        "context": "Find the average rank of winners in all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select avg(winner_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(winner_rank) from matches",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "What is the average rank for winners in all matches?",
        "context": "What is the average rank for winners in all matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select avg(winner_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select max(loser_rank) from matches",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "Find the highest rank of losers in all matches.",
        "context": "Find the highest rank of losers in all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select min(loser_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select loser_rank from matches group by loser_rank order by count(*) desc limit 1",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "What is the best rank of losers across all matches?",
        "context": "What is the best rank of losers across all matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select min(loser_rank) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct country_code) from players",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "find the number of distinct country codes of all players.",
        "context": "find the number of distinct country codes of all players. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(distinct country_code) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct country_code) from players",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "How many distinct countries do players come from?",
        "context": "How many distinct countries do players come from? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(distinct country_code) from players",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct loser_name) from matches",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "Find the number of distinct name of losers.",
        "context": "Find the number of distinct name of losers. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(distinct loser_name) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(distinct loser_name) from matches",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "How many different loser names are there?",
        "context": "How many different loser names are there? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(distinct loser_name) from matches",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "context": "Find the name of tourney that has more than 10 matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "context": "What are the names of tournaments that have more than 10 matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select tourney_name from matches group by tourney_name having count(*) > 10",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "context": "List the names of all winners who played in both 2013 and 2016. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.winner_name from matches as t1 join players as t2 on t1.winner_id = t2.player_id where t1.year = 2013 intersect select t1.winner_name from matches as t1 join players as t2 on t1.winner_id = t2.player_id where t1.year = 2016",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "context": "What are the names of players who won in both 2013 and 2016? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches where year = 2013 or year = 2016",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "context": "List the number of all matches who played in years of 2013 or 2016. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*) from matches where year = 2013 or year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches where year = 2013 or year = 2016",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "How many matches were played in 2013 or 2016?",
        "context": "How many matches were played in 2013 or 2016? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*) from matches where year = 2013 or year = 2016",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id join rankings as t3 on t1.player_id = t3.player_id where t2.tourney_name = 'Australian Open'",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "context": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships, Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.first_name, t1.country_code from players as t1 join matches as t2 on t1.player_id = t2.winner_id join rankings as t3 on t1.player_id = t3.player_id where t2.tourney_name = 'Australian Open'",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "context": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships, Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the first name and country code of the oldest player.",
        "context": "Find the first name and country code of the oldest player. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the first name and country code of the oldest player?",
        "context": "What is the first name and country code of the oldest player? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, last_name from players order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "List the first and last name of all players in the order of birth date.",
        "context": "List the first and last name of all players in the order of birth date. | wta_1 | players : player_id, first_name, last_name ( Date, Last ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select first_name, last_name from players order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, last_name from players order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "What are the full names of all players, sorted by birth date?",
        "context": "What are the full names of all players, sorted by birth date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select first_name, last_name from players order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, last_name from players where hand = \"L\" order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "context": "List the first and last name of all players who are left / L hand in the order of birth date. | wta_1 | players : player_id, first_name, last_name ( Date, Last ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select first_name, last_name from players where hand = \"left\" order by birth_date",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "context": "What are the full names of all left handed players, in order of birth date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t2.player_id order by count(*) desc limit 1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "context": "Find the first name and country code of the player who did the most number of tours. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t2.player_id order by count(*) desc limit 1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the first name and country code of the player with the most tours?",
        "context": "What is the first name and country code of the player with the most tours? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select t1.country_code, t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "context": "Find the year that has the most number of matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "context": "Which year had the most matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name, winner_rank_points from matches group by winner_id order by count(*) desc limit 1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "context": "Find the name and rank points of the winner who won the most times. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select winner_name, winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name, winner_rank_points from matches as t1 join rankings as t2 on t1.winner_id = t2.player_id group by t2.player_id order by count(*) desc limit 1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "context": "What is the name of the winner who has won the most matches, and how many rank points does this player have? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select winner_name, winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.winner_name from matches as t1 join rankings as t2 on t1.loser_id = t2.player_id where t1.tourney_name = \"Australian open\" order by t2.winner_rank_points",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "context": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.winner_name from matches as t1 join rankings as t2 on t1.loser_id = t2.player_id where t1.tourney_name = \"Australian open\" order by t2.winner_rank_points",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "context": "What is the name of the winner with the most rank points who participated in the Australian Open tournament? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( Australian Open ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select loser_name, winner_name from matches order by minutes desc limit 1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "context": "find the names of loser and winner who played in the match with greatest number of minutes. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select winner_name, loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.winner_name, t1.loser_name from matches as t1 join players as t2 on t1.loser_id = t2.player_id order by t1.minutes desc limit 1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "context": "What are the names of the winner and loser who played in the longest match? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select winner_name, loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the average ranking for each player and their first name.",
        "context": "Find the average ranking for each player and their first name. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, avg(t2.ranking) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their average rankings?",
        "context": "What are the first names of all players, and their average rankings? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the total ranking points for each player and their first name.",
        "context": "Find the total ranking points for each player and their first name. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, sum(t2.ranking_points) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their total ranking points?",
        "context": "What are the first names of all players, and their total ranking points? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code, count(*) from players group by country_code",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "find the number of players for each country.",
        "context": "find the number of players for each country. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*), country_code from players group by country_code",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code, count(*) from players group by country_code",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many players are from each country?",
        "context": "How many players are from each country? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*), country_code from players group by country_code",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "context": "find the code of the country where has the greatest number of players. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "context": "What is the code of the country with the most players? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "Find the codes of countries that have more than 50 players.",
        "context": "Find the codes of countries that have more than 50 players. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the codes of countries with more than 50 players?",
        "context": "What are the codes of countries with more than 50 players? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select country_code from players group by country_code having count(*) > 50",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of tours for each ranking date.",
        "context": "Find the total number of tours for each ranking date. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "How many total tours were there for each ranking date?",
        "context": "How many total tours were there for each ranking date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*), year from matches group by year",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of matches happened in each year.",
        "context": "Find the number of matches happened in each year. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*), year from matches group by year",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*), year from matches group by year",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "context": "How many matches were played in each year? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*), year from matches group by year",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age asc limit 3",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "context": "Find the name and rank of the 3 youngest winners across all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age asc limit 3",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "context": "What are the names and ranks of the three youngest winners across all matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches as t1 join players as t2 on t1.loser_id = t2.player_id where t1.tourney_name = \"WTA Championships\" and t2.hand = \"left\"",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "context": "How many different winners both participated in the WTA Championships and were left handed? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(distinct winner_name) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select count(*) from matches where tourney_name = \"WTA Championships\" and winner_hand = \"left\"",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "context": "Find the number of left handed winners who participated in the WTA Championships. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name ( WTA Championships ), winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(distinct winner_name) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "context": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "context": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select hand, count(*) from players group by hand",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "Find the number of players for each hand type.",
        "context": "Find the number of players for each hand type. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*), hand from players group by hand",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "wta_1 | select hand, count(*) from players group by hand",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "context": "How many players are there for each hand type? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours",
        "label": "wta_1 | select count(*), hand from players group by hand",
        "db_id": "wta_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "players",
            "matches",
            "rankings"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "player_id",
                "first_name",
                "last_name",
                "hand",
                "birth_date",
                "country_code",
                "best_of",
                "draw_size",
                "loser_age",
                "loser_entry",
                "loser_hand",
                "loser_ht",
                "loser_id",
                "loser_ioc",
                "loser_name",
                "loser_rank",
                "loser_rank_points",
                "loser_seed",
                "match_num",
                "minutes",
                "round",
                "score",
                "surface",
                "tourney_date",
                "tourney_id",
                "tourney_level",
                "tourney_name",
                "winner_age",
                "winner_entry",
                "winner_hand",
                "winner_ht",
                "winner_id",
                "winner_ioc",
                "winner_name",
                "winner_rank",
                "winner_rank_points",
                "winner_seed",
                "year",
                "ranking_date",
                "ranking",
                "player_id",
                "ranking_points",
                "tours"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                32,
                13,
                41
            ],
            "other_column_id": [
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "battle_death | select count(*) from ship where disposition_of_ship = 'Captured'",
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "question": "How many ships ended up being 'Captured'?",
        "context": "How many ships ended up being 'Captured'? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship ( Captured ) | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select count(*) from ship where disposition_of_ship = 'Captured'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select name, tonnage from ship order by name desc",
        "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "context": "List the name and tonnage ordered by in descending alphaetical order for the names. | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select name, tonnage from ship order by name desc",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select name, date, result from battle",
        "query": "SELECT name ,  date FROM battle",
        "question": "List the name, date and result of each battle.",
        "context": "List the name, date and result of each battle. | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select name, date from battle",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select max(killed), min(killed) from death group by caused_by_ship_id",
        "query": "SELECT max(killed) ,  min(killed) FROM death",
        "question": "What is maximum and minimum death toll caused each time?",
        "context": "What is maximum and minimum death toll caused each time? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select max(killed), min(killed) from death",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select avg(injured) from death group by injured",
        "query": "SELECT avg(injured) FROM death",
        "question": "What is the average number of injuries caused each time?",
        "context": "What is the average number of injuries caused each time? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select avg(injured) from death",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select caused_by_ship_id, t1.killed from death as t1 join ship as t2 on t1.id = caused_by_ship_id where t2.tonnage = 't'",
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "context": "What are the death and injury situations caused by the ship with tonnage 't'? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select t1.killed, t1.injured from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id where t2.tonnage = 't'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select name, result from battle where bulgarian_commander!= 'Boril'",
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "context": "What are the name and results of the battles when the bulgarian commander is not 'Boril' | battle_death | battle : id, name, date, bulgarian_commander ( Boril ), latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select name, result from battle where bulgarian_commander!= 'Boril'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "context": "What are the different ids and names of the battles that lost any 'Brig' type shipes? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type ( Brig ), location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select t1.id, t1.name from battle as t1 join death as t2 on t1.id = t2.caused_by_ship_id group by t1.id having sum(t2.killed) > 10",
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "context": "What are the ids and names of the battles that led to more than 10 people killed in total. | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle join death as t3 on t2.id = t3.caused_by_ship_id group by t1.id having sum(t3.killed) > 10",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select t1.id, t1.name from ship as t1 join death as t2 on t1.id = t2.caused_by_ship_id group by t1.id order by sum(t2.injured) desc limit 1",
        "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the ship id and name that caused most total injuries?",
        "context": "What is the ship id and name that caused most total injuries? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select t2.id, t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id group by t2.id order by count(*) desc limit 1",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "context": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? | battle_death | battle : id, name, date, bulgarian_commander ( Kaloyan ), latin_commander ( Baldwin I ), result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select count(distinct result) from battle",
        "query": "SELECT count(DISTINCT RESULT) FROM battle",
        "question": "How many different results are there for the battles?",
        "context": "How many different results are there for the battles? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select count(distinct result) from battle",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage = 225 )",
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "context": "How many battles did not lose any ship with tonnage '225'? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' );",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'Lettice' intersect select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'HMS Atalanta'",
        "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "context": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name ( HMS Atalanta, Lettice ), tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'Lettice' intersect select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'HMS Atalanta'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select name, result, bulgarian_commander from battle except select t1.name, t1.result, t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.location = 'English Channel'",
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "context": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location ( English Channel ), disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select name, result, bulgarian_commander from battle except select t1.name, t1.result, t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.location = 'English Channel'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "battle_death | select note from death where note like '%east%'",
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the notes of the death events which has substring 'East'?",
        "context": "What are the notes of the death events which has substring 'East'? | battle_death | battle : id, name, date, bulgarian_commander, latin_commander, result | ship : lost_in_battle foreign key battle, id, name, tonnage, ship_type, location, disposition_of_ship | death : caused_by_ship_id foreign key ship, id, note, killed, injured",
        "label": "battle_death | select note from death where note like '%east%'",
        "db_id": "battle_death",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "battle",
            "ship",
            "death"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "name",
                "date",
                "bulgarian_commander",
                "latin_commander",
                "result",
                "lost_in_battle",
                "id",
                "name",
                "tonnage",
                "ship_type",
                "location",
                "disposition_of_ship",
                "caused_by_ship_id",
                "id",
                "note",
                "killed",
                "injured"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                7,
                14
            ],
            "other_column_id": [
                1,
                8
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select address_id, line_1 + line_2 from addresses union select address_id, line_3 from addresses",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "context": "what are all the addresses including line 1 and line 2? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select line_1, line_2 from addresses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "What is the first and second line for all addresses?",
        "context": "What is the first and second line for all addresses? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select line_1, line_2 from addresses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from courses",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses in total are listed?",
        "context": "How many courses in total are listed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(*) from courses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from courses",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses are there?",
        "context": "How many courses are there? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(*) from courses",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select course_description from courses where course_name = \"math\"",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "How is the math course described?",
        "context": "How is the math course described? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name ( math ), course_description, other_details | departments : department_id, department_name ( math ), department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select course_description from courses where course_name ='math'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select course_description from courses where course_name = \"math\"",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "What are the descriptions for all the math courses?",
        "context": "What are the descriptions for all the math courses? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name ( math ), course_description, other_details | departments : department_id, department_name ( math ), department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select course_description from courses where course_name ='math'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select zip_postcode from addresses where city = \"Port Chelsea\"",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "context": "What is the zip code of the address in the city Port Chelsea? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city ( Port Chelsea ), zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select zip_postcode from addresses where city = 'Port Chelsea'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select zip_postcode from addresses where city = \"Port Chelsea\"",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "context": "What is the zip code for Port Chelsea? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city ( Port Chelsea ), zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select zip_postcode from addresses where city = 'Port Chelsea'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.department_name, t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "context": "Which department offers the most number of degrees? List department name and id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t2.department_name, t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.department_name, t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "context": "What is the name and id of the department with the most number of degrees? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t2.department_name, t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct department_id) from degree_programs",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "context": "How many departments offer any degree? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct t2.department_name) from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t2.department_name",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many different departments offer degrees?",
        "context": "How many different departments offer degrees? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct degree_summary_name) from degree_programs",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degree names are offered?",
        "context": "How many different degree names are offered? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(distinct degree_summary_name) from degree_programs",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct degree_summary_name) from degree_programs",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degrees are offered?",
        "context": "How many different degrees are offered? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(distinct degree_summary_name) from degree_programs",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = \"Engineering\"",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department offer?",
        "context": "How many degrees does the engineering department offer? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = 'engineer'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = \"Engineering\"",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department have?",
        "context": "How many degrees does the engineering department have? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = 'engineer'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_name, section_description from sections",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions of all the sections?",
        "context": "What are the names and descriptions of all the sections? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select section_name, section_description from sections",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_name, section_description from sections",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions for all the sections?",
        "context": "What are the names and descriptions for all the sections? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select section_name, section_description from sections",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) <= 2",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and id of courses having at most 2 sections?",
        "context": "What are the names and id of courses having at most 2 sections? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) <= 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) < 2",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "context": "What are the names and ids of every course with less than 2 sections? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) <= 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_name from sections order by section_name desc",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "context": "List the section_name in reversed lexicographical order. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select section_name from sections order by section_name desc",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_name from sections order by section_name desc",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "context": "What are the names of the sections in reverse alphabetical order? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select section_name from sections order by section_name desc",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.semester_name, t1.semester_id from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "context": "What is the semester which most student registered in? Show both the name and the id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.semester_name, t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.semester_name, t1.semester_id from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "context": "For each semester, what is the name and id of the one with the most students registered? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.semester_name, t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select department_description from departments where department_name like '%computer%'",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the description of the department whose name has the substring the computer?",
        "context": "What is the description of the department whose name has the substring the computer? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select department_description from departments where department_name like '%computer%'",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the department description for the one whose name has the word computer?",
        "context": "What is the department description for the one whose name has the word computer? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.first_name, t2.middle_name, t2.last_name, t1.student_enrolment_id from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t1.degree_program_id = t3.degree_program_id group by t1.student_id having count(*) >= 2",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "context": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id group by t1.student_id having count(*) >= 2",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "context": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = \"Bache\"",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "context": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name ( Bachelor ), degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select distinct t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id where t1.degree_program_id = \"Bachelor\"",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "context": "What are the first, middle, and last names for everybody enrolled in a Bachelors program? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select distinct t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select degree_program_id from student_enrolment group by degree_program_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "context": "Find the kind of program which most number of students are enrolled in? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.degree_summary_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id group by t2.degree_summary_name order by count(*) desc limit 1",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "context": "What is the degree summary name that has the most number of students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.degree_program_id, t2.degree_summary_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "context": "Find the program which most number of students are enrolled in. List both the id and the summary. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.degree_program_id, t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.degree_program_id, t2.degree_summary_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id group by t2.degree_program_id order by count(*) desc limit 1",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "context": "What is the program id and the summary of the degree that has the most students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.degree_program_id, t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "context": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_",
        "label": "student_transcripts_tracking | select t1.student_id, t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.first_name, t1.middle_name, t1.last_name, t1.student_id, count(*) from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "context": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key",
        "label": "student_transcripts_tracking | select t1.student_id, t1.first_name, t1.middle_name, t1.last_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "context": "Which semesters do not have any student enrolled? List the semester name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the semester with no students enrolled?",
        "context": "What is the name of the semester with no students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "context": "What are all the course names of the courses which ever have students enrolled in? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are the names of all courses that have some students enrolled?",
        "context": "What are the names of all courses that have some students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the course with most number of enrollments?",
        "context": "What's the name of the course with most number of enrollments? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_id order by count(*) desc limit 1",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most students enrolled?",
        "context": "What is the name of the course with the most students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select last_name from students where current_address_id like '%nc%'",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "context": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id = t2.address_id where t2.state_province_county = 'NorthCarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id = t4.student_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select last_name from students where current_address_id like '%nc%'",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "context": "What are the last name of the students who live in North Carolina but have not registered in any degree programs? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id = t2.address_id where t2.state_province_county = 'NorthCarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id = t4.student_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.transcript_date, t1.transcript_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "context": "Show the date and id of the transcript with at least 2 course results. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.transcript_date, t1.transcript_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "context": "What is the date and id of the transcript with at least 2 courses listed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select cell_mobile_number from students where first_name = \"Timmothy\" and last_name = \"Ward\"",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "context": "What is the phone number of the man with the first name Timmothy and the last name Ward? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name ( Timmothy ), middle_name, last_name ( Ward ), cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select cell_mobile_number from students where first_name = \"Timmothy\" and last_name = \"Ward\"",
        "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "context": "What is the mobile phone number of the student named Timmothy Ward? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name ( Timmothy ), middle_name, last_name ( Ward ), cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_first_registered desc limit 1",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "context": "Who is the first student to register? List the first name, middle name and last name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_first_registered desc limit 1",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the first student to register?",
        "context": "What is the first, middle, and last name of the first student to register? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_first_registered limit 1",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "context": "Who is the earliest graduate of the school? List the first name, middle name and last name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_first_registered limit 1",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "context": "What is the first, middle, and last name of the earliest school graduate? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.first_name from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t1.state_province_county!= \"No\"",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "context": "Whose permanent address is different from his or her current address? List his or her first name. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select first_name from students where current_address_id!= permanent_address_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select first_name from students where permanent_address_id!= \"null\"",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "context": "What is the first name of the student whose permanent address is different from his or her current one? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select first_name from students where current_address_id!= permanent_address_id",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.address_id, t1.line_1 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "context": "Which address holds the most number of students currently? List the address id and all lines. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "context": "What is the id, line 1, and line 2 of the address with the most students? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select avg(transcript_date) from transcripts",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "On average, when were the transcripts printed?",
        "context": "On average, when were the transcripts printed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select avg(transcript_date) from transcripts",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select avg(transcript_date) from transcripts",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "What is the average transcript date?",
        "context": "What is the average transcript date? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select avg(transcript_date) from transcripts",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "When is the first transcript released? List the date and details.",
        "context": "When is the first transcript released? List the date and details. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select transcript_date, other_details from transcripts",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "context": "What is the earliest date of a transcript release, and what details can you tell me? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from transcripts",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are released?",
        "context": "How many transcripts are released? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(*) from transcripts",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(*) from transcripts",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are listed?",
        "context": "How many transcripts are listed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(*) from transcripts",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select max(transcript_date) from transcripts",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "What is the last transcript release date?",
        "context": "What is the last transcript release date? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select transcript_date from transcripts order by transcript_date desc limit 1",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "When was the last transcript released?",
        "context": "When was the last transcript released? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct student_enrolment_id), t1.student_enrolment_id from student_enrolment_courses as t1 join transcript_contents as t2 on t1.student_course_id = t2.student_course_id group by t1.student_enrolment_id",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "context": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(*), student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select max(course_id), student_enrolment_id from student_enrolment_courses",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "context": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(*), student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select transcript_date, transcript_id from transcripts group by transcript_id order by count(*) asc limit 1",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "context": "Show the date of the transcript which shows the least number of results, also list the id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select transcript_date, transcript_id from transcripts group by transcript_id order by count(*) limit 1",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the date and id of the transcript with the least number of results?",
        "context": "What is the date and id of the transcript with the least number of results? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.semester_name from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id join degree_programs as t3 on t1.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Master' intersect select t2.se",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "context": "Find the semester when both Master students and Bachelor students got enrolled in. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name ( Bachelor, Master ), degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select semester_id from student_enrolment where degree_program_id = \"MA\" intersect select semester_id from student_enrolment where degree_program_id = \"BA\"",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "context": "What is the id of the semester that had both Masters and Bachelors students enrolled? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select count(distinct current_address_id) from students",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "How many different addresses do the students currently live?",
        "context": "How many different addresses do the students currently live? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select distinct t1.address_id from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "What are the different addresses that have students living there?",
        "context": "What are the different addresses that have students living there? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select other_student_details from students order by other_student_details",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "List all the student details in reversed lexicographical order.",
        "context": "List all the student details in reversed lexicographical order. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select other_student_details from students order by other_student_details desc",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "context": "What other details can you tell me about students in reverse alphabetical order? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_description from sections where section_name = 'h'",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "Describe the section h.",
        "context": "Describe the section h. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select section_description from sections where section_name = 'h'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select section_description from sections where section_name = \"h\"",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "What is the description for the section named h?",
        "context": "What is the description for the section named h? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select section_description from sections where section_name = 'h'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select t2.first_name from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t1.country = \"Haiti\" or t2.cell_mobile_number = \"09700166582\"",
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "context": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country ( Haiti ), other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "student_transcripts_tracking | select first_name from students where permanent_address_id = \"Haiti\" or cell_mobile_number = \"09700166582\"",
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "context": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country ( Haiti ), other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts",
        "label": "student_transcripts_tracking | select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
        "db_id": "student_transcripts_tracking",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Addresses",
            "Courses",
            "Departments",
            "Degree_Programs",
            "Sections",
            "Semesters",
            "Students",
            "Student_Enrolment",
            "Student_Enrolment_Courses",
            "Transcripts",
            "Transcript_Contents"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                9,
                9,
                9,
                10,
                10
            ],
            "column_name": [
                "*",
                "address_id",
                "line_1",
                "line_2",
                "line_3",
                "city",
                "zip_postcode",
                "state_province_county",
                "country",
                "other_address_details",
                "course_id",
                "course_name",
                "course_description",
                "other_details",
                "department_id",
                "department_name",
                "department_description",
                "other_details",
                "degree_program_id",
                "department_id",
                "degree_summary_name",
                "degree_summary_description",
                "other_details",
                "section_id",
                "course_id",
                "section_name",
                "section_description",
                "other_details",
                "semester_id",
                "semester_name",
                "semester_description",
                "other_details",
                "student_id",
                "current_address_id",
                "permanent_address_id",
                "first_name",
                "middle_name",
                "last_name",
                "cell_mobile_number",
                "email_address",
                "ssn",
                "date_first_registered",
                "date_left",
                "other_student_details",
                "student_enrolment_id",
                "degree_program_id",
                "semester_id",
                "student_id",
                "other_details",
                "student_course_id",
                "course_id",
                "student_enrolment_id",
                "transcript_id",
                "transcript_date",
                "other_details",
                "student_course_id",
                "transcript_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                19,
                24,
                34,
                33,
                47,
                46,
                45,
                51,
                50,
                56,
                55
            ],
            "other_column_id": [
                14,
                10,
                1,
                1,
                32,
                28,
                18,
                44,
                10,
                52,
                49
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon order by title",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the title of all cartoons in alphabetical order.",
        "context": "List the title of all cartoons in alphabetical order. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select title from cartoon order by title",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon order by title",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "context": "What are the titles of the cartoons sorted alphabetically? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select title from cartoon order by title",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "context": "List all cartoon directed by \"Ben Jones\". | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select title from cartoon where directed_by = \"Ben Jones\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "context": "What are the names of all cartoons directed by Ben Jones? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select title from cartoon where directed_by = \"Ben Jones\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "context": "How many cartoons were written by \"Joseph Kuhr\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by ( Joseph Kuhr ), original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select count(*) from cartoon where written_by = \"Joseph Kuhr\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "context": "What is the number of cartoones written by Joseph Kuhr? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by ( Joseph Kuhr ), original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select count(*) from cartoon where written_by = \"Joseph Kuhr\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title, directed_by from cartoon order by original_air_date",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "context": "list all cartoon titles and their directors ordered by their air date | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select title, directed_by from cartoon order by original_air_date",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title, directed_by from cartoon order by original_air_date",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "context": "What is the name and directors of all the cartoons that are ordered by air date? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select title, directed_by from cartoon order by original_air_date",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "context": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Brandon Vietti, Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "context": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Brandon Vietti, Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country, count(*) from tv_channel group by country order by count(*) desc limit 1",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "context": "Which country has the most of TV Channels? List the country and number of TV Channels it has. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select country, count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country, count(*) from tv_channel group by country order by count(*) desc limit 1",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "context": "What is the country with the most number of TV Channels and how many does it have? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select country, count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(distinct series_name), count(distinct content) from tv_channel",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "context": "List the number of different series names and contents in the TV Channel table. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select count(distinct series_name), count(distinct content) from tv_channel;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(distinct series_name), count(distinct content) from tv_channel",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "context": "How many different series and contents are listed in the TV Channel table? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select count(distinct series_name), count(distinct content) from tv_channel;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select content from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "context": "What is the content of TV Channel with serial name \"Sky Radio\"? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select content from tv_channel where series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select content from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of the series Sky Radio?",
        "context": "What is the content of the series Sky Radio? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select content from tv_channel where series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "context": "What is the Package Option of TV Channel with serial name \"Sky Radio\"? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select package_option from tv_channel where series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option from tv_channel where series_name = \"Sky Radio\"",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "context": "What are the Package Options of the TV Channels whose series names are Sky Radio? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select package_option from tv_channel where series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(*) from tv_channel where language = \"English\"",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channel using language English?",
        "context": "How many TV Channel using language English? | tvshow | tv_channel : id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select count(*) from tv_channel where language = \"English\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select count(*) from tv_channel where language = \"English\"",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "context": "How many TV Channels use the English language? | tvshow | tv_channel : id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select count(*) from tv_channel where language = \"English\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "context": "List the language used least number of TV Channel. List language and number of TV Channel. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select language, count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select language, count(*) from tv_channel group by language order by count(*) asc limit 1",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "context": "What are the languages used by the least number of TV Channels and how many channels use it? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select language, count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select language, count(*) from tv_channel group by language",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "List each language and the number of TV Channels using it.",
        "context": "List each language and the number of TV Channels using it. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select language, count(*) from tv_channel group by language",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select language, count(*) from tv_channel group by language",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "context": "For each language, list the number of TV Channels that use it. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select language, count(*) from tv_channel group by language",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The Rise of the Blue Beetle!\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "context": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title ( The Rise of the Blue Beetle! ), directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The rise of the blue beetle!\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t2.series_name from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t1.title = \"The Rise of the Blue Beetle!\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "context": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title ( The Rise of the Blue Beetle! ), directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The rise of the blue beetle!\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.title from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t2.series_name = \"Sky Radio\"",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "context": "List the title of all Cartoons showed on TV Channel with series name \"Sky Radio\". | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.title from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t2.series_name = \"Sky Radio\"",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "context": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode from tv_series order by rating",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "context": "List the Episode of all TV series sorted by rating. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select episode from tv_series order by rating",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode from tv_series order by rating",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "What are all of the episodes ordered by ratings?",
        "context": "What are all of the episodes ordered by ratings? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select episode from tv_series order by rating",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode, rating from tv_series order by rating desc limit 3",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "context": "List top 3 highest Rating TV series. List the TV series's Episode and Rating. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select episode, rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select episode, rating from tv_series order by rating desc limit 3",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "context": "What are 3 most highly rated episodes in the TV series table and what were those ratings? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select episode, rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select min(share), max(share) from tv_series",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is minimum and maximum share of TV series?",
        "context": "What is minimum and maximum share of TV series? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select max(share), min(share) from tv_series;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select max(share), min(share) from tv_series",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is the maximum and minimum share for the TV series?",
        "context": "What is the maximum and minimum share for the TV series? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select max(share), min(share) from tv_series;",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select air_date from tv_series where episode = \"A Love of a Lifetime\"",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "context": "What is the air date of TV series with Episode \"A Love of a Lifetime\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select air_date from tv_series where episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select air_date from tv_series where episode = \"A Love of a Lifetime\"",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "context": "When did the episode \"A Love of a Lifetime\" air? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select air_date from tv_series where episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select weekly_rank from tv_series where episode = \"A love of a Lifetime\"",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "context": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select weekly_rank from tv_series where episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select weekly_rank from tv_series where episode = \"A love of a Lifetime\"",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "context": "What is the weekly rank for the episode \"A Love of a Lifetime\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select weekly_rank from tv_series where episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t2.series_name from tv_series as t1 join tv_channel as t2 on t1.channel = t2.id where t1.episode = \"A Love of a Lifetime\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "context": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t2.series_name from tv_series as t1 join tv_channel as t2 on t1.channel = t2.id where t1.episode = \"A Love of a Lifetime\"",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "context": "What is the name of the series that has the episode \"A Love of a Lifetime\"? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode ( A Love of a Lifetime ), air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"A love of a Lifetime\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.episode from tv_series as t1 join tv_channel as t2 on t1.channel = t2.id where t2.series_name = \"Sky Radio\"",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "context": "List the Episode of all TV series showed on TV Channel with series name \"Sky Radio\". | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.episode from tv_series as t1 join tv_channel as t2 on t1.channel = t2.id where t2.series_name = \"Sky Radio\"",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "context": "What is the episode for the TV series named \"Sky Radio\"? | tvshow | tv_channel : id, series_name ( Sky Radio ), country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select directed_by, count(*) from cartoon group by directed_by",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "context": "Find the number of cartoons directed by each of the listed directors. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select count(*), directed_by from cartoon group by directed_by",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select directed_by, count(*) from cartoon group by directed_by",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many cartoons did each director create?",
        "context": "How many cartoons did each director create? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select count(*), directed_by from cartoon group by directed_by",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select production_code, channel from cartoon order by original_air_date desc limit 1",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "context": "Find the production code and channel of the most recently aired cartoon. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select production_code, channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select production_code, channel from cartoon order by original_air_date desc limit 1",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "context": "What is the produdction code and channel of the most recent cartoon? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select production_code, channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option, series_name from tv_channel where hight_definition_tv = 'Y'",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "context": "Find the package choice and series name of the TV channel that has high definition TV. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select series_name, package_option from tv_channel where hight_definition_tv = \"On\"",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "context": "What are the package options and the name of the series for the TV Channel that supports high definition TV? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = \"Todd Casey\"",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "context": "which countries' tv channels are playing some cartoon written by Todd Casey? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = \"Todd Casey\"",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "context": "What are the countries that have cartoons on TV that were written by Todd Casey? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = \"Todd Casey\"",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "context": "which countries' tv channels are not playing any cartoon written by Todd Casey? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = \"Todd Casey\"",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "context": "What are the countries that are not playing cartoons written by Todd Casey? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by ( Todd Casey ), original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t2.series_name, t2.country from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t1.directed_by = 'Ben Jones' intersect select t2.series_name, t2.country from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t1.directed_by = 'Michain'",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "context": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Michael Chang, Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select t2.series_name, t2.country from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t1.directed_by = \"Ben Jones\" intersect select t2.series_name, t2.country from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t1.directed_by = \"Michael Chang\"",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "context": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Michael Chang, Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select pixel_aspect_ratio_par, country from tv_channel where language!= \"English\"",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "context": "find the pixel aspect ratio and nation of the tv channels that do not use English. | tvshow | tv_channel : id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select pixel_aspect_ratio_par, country from tv_channel where language!= \"English\"",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "context": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English? | tvshow | tv_channel : id, series_name, country, language ( English ), content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select id from tv_channel where country > 2",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "context": "find id of the tv channels that from the countries where have more than two tv channels. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select id from tv_channel group by country having count(*) > 2",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select id from tv_channel group by id having count(*) > 2",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "context": "What are the ids of all tv channels that have more than 2 TV channels? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by, written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select id from tv_channel group by country having count(*) > 2",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select id from tv_channel except select id from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "context": "find the id of tv channels that do not play any cartoon directed by Ben Jones. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select id from tv_channel except select id from cartoon where directed_by = \"Ben Jones\"",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "context": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select id from tv_channel except select channel from cartoon where directed_by = 'Ben Jones'",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option from tv_channel except select t2.package_option from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t1.directed_by = \"Ben Jones\"",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "context": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones. | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select package_option from tv_channel where id not in (select channel from cartoon where directed_by = 'Ben Jones')",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "tvshow | select package_option from tv_channel except select t2.package_option from cartoon as t1 join tv_channel as t2 on t1.channel = t2.id where t1.directed_by = \"Ben Jones\"",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "context": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? | tvshow | tv_channel : id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option ( Option ) | tv_series : id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel foreign key tv_channel | cartoon : id, title, directed_by ( Ben Jones ), written_by, original_air_date, production_code, channel foreign key tv_channel",
        "label": "tvshow | select package_option from tv_channel where id not in (select channel from cartoon where directed_by = 'Ben Jones')",
        "db_id": "tvshow",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "TV_Channel",
            "TV_series",
            "Cartoon"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "id",
                "series_name",
                "Country",
                "Language",
                "Content",
                "Pixel_aspect_ratio_PAR",
                "Hight_definition_TV",
                "Pay_per_view_PPV",
                "Package_Option",
                "id",
                "Episode",
                "Air_Date",
                "Rating",
                "Share",
                "18_49_Rating_Share",
                "Viewers_m",
                "Weekly_Rank",
                "Channel",
                "id",
                "Title",
                "Directed_by",
                "Written_by",
                "Original_air_date",
                "Production_code",
                "Channel"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                18,
                25
            ],
            "other_column_id": [
                1,
                1
            ]
        }
    },
    {
        "prediction": "poker_player | select count(*) from poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "How many poker players are there?",
        "context": "How many poker players are there? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select count(*) from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select count(*) from poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "Count the number of poker players.",
        "context": "Count the number of poker players. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select count(*) from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select earnings from poker_player order by earnings desc",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "context": "List the earnings of poker players in descending order. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select earnings from poker_player order by earnings desc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select earnings from poker_player order by earnings desc",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "context": "What are the earnings of poker players, ordered descending by value? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select earnings from poker_player order by earnings desc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select final_table_made, best_finish from poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "context": "List the final tables made and the best finishes of poker players. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select final_table_made, best_finish from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select final_table_made, best_finish from poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "context": "What are the final tables made and best finishes for all poker players? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select final_table_made, best_finish from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select avg(earnings) from poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "What is the average earnings of poker players?",
        "context": "What is the average earnings of poker players? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select avg(earnings) from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select avg(earnings) from poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average earnings across all poker players.",
        "context": "Return the average earnings across all poker players. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select avg(earnings) from poker_player",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select money_rank from poker_player order by earnings desc limit 1",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "context": "What is the money rank of the poker player with the highest earnings? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select money_rank from poker_player order by earnings desc limit 1",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "context": "Return the money rank of the player with the greatest earnings. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select max(final_table_made) from poker_player where earnings < 200000",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "context": "What is the maximum number of final tables made among poker players with earnings less than 200000? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select max(final_table_made) from poker_player where earnings < 200000",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select max(final_table_made) from poker_player where earnings < 200000",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "context": "Return the maximum final tables made across all poker players who have earnings below 200000. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select max(final_table_made) from poker_player where earnings < 200000",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of poker players?",
        "context": "What are the names of poker players? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of all the poker players.",
        "context": "Return the names of all the poker players. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.earnings > 300000",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "context": "What are the names of poker players whose earnings is higher than 300000? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.earnings > 300000",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of poker players who have earnings above 300000.",
        "context": "Give the names of poker players who have earnings above 300000. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t2.earnings > 300000",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.final_table_made",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "context": "List the names of poker players ordered by the final tables made in ascending order. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.final_table_made asc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "context": "What are the names of poker players, ordered ascending by the number of final tables they have made? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.final_table_made",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "context": "What is the birth date of the poker player with the lowest earnings? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "context": "Return the birth date of the poker player with the lowest earnings. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "context": "What is the money rank of the tallest poker player? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "context": "Return the money rank of the poker player with the greatest height. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select avg(t1.earnings) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "context": "What is the average earnings of poker players with height higher than 200? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select avg(t1.earnings) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "Give average earnings of poker players who are taller than 200.",
        "context": "Give average earnings of poker players who are taller than 200. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings desc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "context": "What are the names of poker players in descending order of earnings? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings desc",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "context": "Return the names of poker players sorted by their earnings descending. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select t1.name from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.earnings desc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality, count(*) from people group by nationality",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "context": "What are different nationalities of people and the corresponding number of people from each nation? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select nationality, count(*) from people group by nationality",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality, count(*) from people group by nationality",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each nationality?",
        "context": "How many people are there of each nationality? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select nationality, count(*) from people group by nationality",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality from people group by nationality order by count(*) desc limit 1",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common nationality of people?",
        "context": "What is the most common nationality of people? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select nationality from people group by nationality order by count(*) desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality from people group by nationality order by count(*) desc limit 1",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "context": "Give the nationality that is most common across all people. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select nationality from people group by nationality order by count(*) desc limit 1",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality from people group by nationality having count(*) >= 2",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the nationalities that are shared by at least two people?",
        "context": "What are the nationalities that are shared by at least two people? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select nationality from people group by nationality having count(*) >= 2",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select nationality from people group by nationality having count(*) >= 2",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the nationalities for which there are two or more people.",
        "context": "Return the nationalities for which there are two or more people. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select nationality from people group by nationality having count(*) >= 2",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name, birth_date from people order by name asc",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "context": "List the names and birth dates of people in ascending alphabetical order of name. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select name, birth_date from people order by name asc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name, birth_date from people order by name",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "context": "What are the names and birth dates of people, ordered by their names in alphabetical order? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select name, birth_date from people order by name asc",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people where nationality!= \"Russia \"",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "context": "Show names of people whose nationality is not \"Russia\". | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality ( Russia ), name, birth_date, height",
        "label": "poker_player | select name from people where nationality!= \"Russia\"",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people where nationality!= 'Russia'",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "What are the names of people who are not from Russia?",
        "context": "What are the names of people who are not from Russia? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality ( Russia ), name, birth_date, height",
        "label": "poker_player | select name from people where nationality!= \"Russia\"",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people where people_id not in (select people_id from poker_player)",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not poker players.",
        "context": "List the names of people that are not poker players. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select name from people where people_id not in (select people_id from poker_player)",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select name from people where people_id not in (select people_id from poker_player)",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not play poker?",
        "context": "What are the names of people who do not play poker? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select name from people where people_id not in (select people_id from poker_player)",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select count(distinct nationality) from people",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "How many distinct nationalities are there?",
        "context": "How many distinct nationalities are there? | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select count(distinct nationality) from people",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "poker_player | select count(distinct nationality) from people",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "Count the number of different nationalities.",
        "context": "Count the number of different nationalities. | poker_player | poker_player : poker_player_id, people_id foreign key people, final_table_made, best_finish, money_rank, earnings | people : people_id, nationality, name, birth_date, height",
        "label": "poker_player | select count(distinct nationality) from people",
        "db_id": "poker_player",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "poker_player",
            "people"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Poker_Player_ID",
                "People_ID",
                "Final_Table_Made",
                "Best_Finish",
                "Money_Rank",
                "Earnings",
                "People_ID",
                "Nationality",
                "Name",
                "Birth_Date",
                "Height"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                2
            ],
            "other_column_id": [
                7
            ]
        }
    },
    {
        "prediction": "voter_1 | select count(distinct state) from area_code_state",
        "query": "SELECT count(*) FROM area_code_state",
        "question": "How many states are there?",
        "context": "How many states are there? | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select count(*) from area_code_state",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select contestant_number, contestant_name from contestants order by contestant_name desc",
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "context": "List the contestant numbers and names, ordered by contestant name descending. | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select contestant_number, contestant_name from contestants order by contestant_name desc",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select vote_id, phone_number, state from votes",
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "context": "List the vote ids, phone numbers and states of all votes. | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select vote_id, phone_number, state from votes",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select max(area_code) from area_code_state group by area_code",
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "question": "What are the maximum and minimum values of area codes?",
        "context": "What are the maximum and minimum values of area codes? | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select max(area_code), min(area_code) from area_code_state",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select created from votes where state = 'CA'",
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "context": "What is last date created of votes from the state 'CA'? | voter_1 | area_code_state : area_code, state ( CA ) foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state ( CA ) foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select max(created) from votes where state = 'CA'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select contestant_name from contestants where contestant_name!= \"Jessie Alloway\"",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "context": "What are the names of the contestants whose names are not 'Jessie Alloway' | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name ( Jessie Alloway ) | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select contestant_name from contestants where contestant_name!= 'Jessie Alloway'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select distinct state, created from votes",
        "query": "SELECT DISTINCT state ,  created FROM votes",
        "question": "What are the distinct states and create time of all votes?",
        "context": "What are the distinct states and create time of all votes? | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select distinct state, created from votes",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number having count(*) >= 2",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "context": "What are the contestant numbers and names of the contestants who had at least two votes? | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number having count(*) >= 2",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number order by count(*) limit 1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "context": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select count(*) from votes where state = 'NY' or state = 'CA'",
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "context": "What are the number of votes from state 'NY' or 'CA'? | voter_1 | area_code_state : area_code, state ( NY, CA ) foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state ( NY, CA ) foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select count(*) from votes where state = 'NY' or state = 'CA'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select count(*) from contestants where contestant_number not in (select contestant_number from votes)",
        "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "question": "How many contestants did not get voted?",
        "context": "How many contestants did not get voted? | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select count(*) from contestants where contestant_number not in ( select contestant_number from votes )",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select t1.area_code from area_code_state as t1 join votes as t2 on t1.state = t2.state group by t1.area_code order by count(*) desc limit 1",
        "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area code in which the most voters voted?",
        "context": "What is the area code in which the most voters voted? | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select t1.area_code from area_code_state as t1 join votes as t2 on t1.state = t2.state group by t1.area_code order by count(*) desc limit 1",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select t1.created, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.contestant_number = t2.contestant_number where t2.contestant_name = 'Tabatha Gehling'",
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "context": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name ( Tabatha Gehling ) | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select t2.created, t2.state, t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select t1.area_code from area_code_state as t1 join votes as t2 on t1.state = t2.state join contestants as t3 on t2.contestant_number = t3.contestant_number where t3.contestant_name = 'Tabatha Gehling' intersect select t1.area_code from area_code_state as t1 join votes as t2 on t1.state = t2.area_code",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "context": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. | voter_1 | area_code_state : area_code, state foreign key votes | contestants : contestant_number, contestant_name ( Tabatha Gehling, Kelly Clauss ) | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number join area_code_state as t3 on t2.state = t3.state where t1.contestant_name = 'Tabatha Gehling' intersect select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number join area_code_state as t3 on t2.state = t3.state where t1.contestant_name = 'Kelly Clauss'",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "voter_1 | select contestant_name from contestants where contestant_name like '%al%'",
        "query": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "context": "Return the names of the contestants whose names contain the substring 'Al'. | voter_1 | area_code_state : area_code, state ( AL ) foreign key votes | contestants : contestant_number, contestant_name | votes : vote_id, phone_number, state foreign key area_code_state, contestant_number foreign key contestants, created",
        "label": "voter_1 | select contestant_name from contestants where contestant_name like \"%al%\"",
        "db_id": "voter_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "AREA_CODE_STATE",
            "CONTESTANTS",
            "VOTES"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2
            ],
            "column_name": [
                "*",
                "area_code",
                "state",
                "contestant_number",
                "contestant_name",
                "vote_id",
                "phone_number",
                "state",
                "contestant_number",
                "created"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                7
            ],
            "other_column_id": [
                3,
                2
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where indepyear > 1950",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "What are the names of all the countries that became independent after 1950?",
        "context": "What are the names of all the countries that became independent after 1950? | world_1 | city : id, name ( Independence ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where indepyear > 1950",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where indepyear > 1950",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "Give the names of the nations that were founded after 1950.",
        "context": "Give the names of the nations that were founded after 1950. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where indepyear > 1950",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where governmentform = 'Republic'",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many countries have a republic as their form of government?",
        "context": "How many countries have a republic as their form of government? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(*) from country where governmentform = \"Republic\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where governmentform = 'Republic'",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many countries have governments that are republics?",
        "context": "How many countries have governments that are republics? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(*) from country where governmentform = \"Republic\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(surfacearea) from country where region = 'CARIBBEAN'",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "context": "What is the total surface area of the countries in the Caribbean region? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( Caribbean ), isofficial, percentage",
        "label": "world_1 | select sum(surfacearea) from country where region = \"Caribbean\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(surfacearea) from country where region = 'Carribean'",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "context": "How much surface area do the countires in the Carribean cover together? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(surfacearea) from country where region = \"Caribbean\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select continent from country where name = \"Anguilla\"",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "Which continent is Anguilla in?",
        "context": "Which continent is Anguilla in? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Anguilla ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Anguilla ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select continent from country where name = \"Anguilla\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select continent from country where name = \"Anguilla\"",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "context": "What is the continent name which Anguilla belongs to? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Anguilla ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Anguilla ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select continent from country where name = \"Anguilla\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = 'Kabul'",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "context": "Which region is the city Kabul located in? | world_1 | city : id, name ( Kabul ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\"",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "What region is Kabul in?",
        "context": "What region is Kabul in? | world_1 | city : id, name ( Kabul ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\" group by t2.language order by count(*) desc limit 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "context": "Which language is the most popular in Aruba? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\" order by percentage desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language from country",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "context": "What language is predominantly spoken in Aruba? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\" order by percentage desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select population, lifeexpectancy from country where name = 'Brazil'",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "What are the population and life expectancies in Brazil?",
        "context": "What are the population and life expectancies in Brazil? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select population, lifeexpectancy from country where name = \"Brazil\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select population, lifeexpectancy from country where name = 'Brazil'",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "context": "Give me Brazil\u2019s population and life expectancies. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select population, lifeexpectancy from country where name = \"Brazil\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select region, population from country where name = 'Angola'",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What are the region and population of Angola?",
        "context": "What are the region and population of Angola? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Angola ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Angola ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select population, region from country where name = \"Angola\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select region, population from country where name = 'Angola'",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What region does Angola belong to and what is its population?",
        "context": "What region does Angola belong to and what is its population? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Angola ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Angola ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select population, region from country where name = \"Angola\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy) from country where region = \"Central Africa\"",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "context": "What is the average expected life expectancy for countries in the region of Central Africa? | world_1 | city : id, name, countrycode foreign key country, district ( Central ), population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select avg(lifeexpectancy) from country where region = \"Central Africa\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy) from country where region = 'Central Africa'",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "context": "How long is the people\u2019s average life expectancy in Central Africa? | world_1 | city : id, name, countrycode foreign key country, district ( Central ), population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select avg(lifeexpectancy) from country where region = \"Central Africa\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where continent = 'Asia' order by lifeexpectancy limit 1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "context": "What is the name of country that has the shortest life expectancy in Asia? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where continent = \"Asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where continent = 'Asia' order by lifeexpectancy limit 1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "context": "Give the name of the country in Asia with the lowest life expectancy. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where continent = \"Asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(population), max(gnp) from country where continent = 'Asia'",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "What is the total population and maximum GNP in Asia?",
        "context": "What is the total population and maximum GNP in Asia? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population), max(gnp) from country where continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select gnp, population from country where continent = 'Asia' group by gnp order by sum(gnp) desc limit 1",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "context": "How many people live in Asia, and what is the largest GNP among them? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population), max(gnp) from country where continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "What is the average life expectancy in African countries that are republics?",
        "context": "What is the average life expectancy in African countries that are republics? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy) from country where governmentform = 'Republic' and continent = 'Africa'",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "context": "Give the average life expectancy for countries in Africa which are republics? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(surfacearea) from country where continent = 'Asia' intersect select sum(surfacearea) from country where continent = 'Europe'",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "context": "What is the total surface area of the continents Asia and Europe? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(surfacearea) from country where continent = \"Asia\" or continent = \"Europe\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(surfacearea) from country where continent = 'Asia' or continent = 'Europe'",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "context": "Give the total surface area covered by countries in Asia or Europe. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(surfacearea) from country where continent = \"Asia\" or continent = \"Europe\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select population from city where district = \"Gelderland\"",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "How many people live in Gelderland district?",
        "context": "How many people live in Gelderland district? | world_1 | city : id, name, countrycode foreign key country, district ( Gelderland ), population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population) from city where district = \"Gelderland\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(population) from city where district = \"Gelderland\"",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "What is the total population of Gelderland district?",
        "context": "What is the total population of Gelderland district? | world_1 | city : id, name, countrycode foreign key country, district ( Gelderland ), population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population) from city where district = \"Gelderland\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "context": "What is the average GNP and total population in all nations whose government is US territory? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(gnp), sum(population) from country where governmentform = 'US Territory'",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "context": "Give the mean GNP and total population of nations which are considered US territory. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from countrylanguage",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "How many unique languages are spoken in the world?",
        "context": "How many unique languages are spoken in the world? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(distinct language) from countrylanguage",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from countrylanguage",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "What is the number of distinct languages used around the world?",
        "context": "What is the number of distinct languages used around the world? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(distinct language) from countrylanguage",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct governmentform) from country where continent = 'Africa'",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many type of governments are in Africa?",
        "context": "How many type of governments are in Africa? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(distinct governmentform) from country where continent = \"Africa\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct governmentform) from country where continent = 'Africa'",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many different forms of governments are there in Africa?",
        "context": "How many different forms of governments are there in Africa? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(distinct governmentform) from country where continent = \"Africa\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "What is the total number of languages used in Aruba?",
        "context": "What is the total number of languages used in Aruba? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "How many languages are spoken in Aruba?",
        "context": "How many languages are spoken in Aruba? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t2.name = 'Afghanistan'",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages does Afghanistan have?",
        "context": "How many official languages does Afghanistan have? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Afghanistan\" and isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t2.name = \"Afghanistan\"",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages are spoken in Afghanistan?",
        "context": "How many official languages are spoken in Afghanistan? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Afghanistan\" and isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t2.countrycode order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "context": "What is name of the country that speaks the largest number of languages? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t2.countrycode order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "context": "Give the name of the nation that uses the greatest amount of languages. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select continent from country group by continent order by count(*) desc limit 1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "context": "Which continent has the most diverse languages? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t1.continent from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select continent from country group by continent order by count(*) desc limit 1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "context": "Which continent speaks the most languages? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t1.continent from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage where language = \"English\" intersect select count(*) from countrylanguage where language = \"Dutch\"",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "How many countries speak both English and Dutch?",
        "context": "How many countries speak both English and Dutch? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, Dutch ), isofficial, percentage",
        "label": "world_1 | select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage where language = \"English\" intersect select count(*) from countrylanguage where language = \"Dutch\"",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "What is the number of nations that use English and Dutch?",
        "context": "What is the number of nations that use English and Dutch? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, Dutch ), isofficial, percentage",
        "label": "world_1 | select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 where t2.language = 'English' intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "What are the names of nations speak both English and French?",
        "context": "What are the names of nations speak both English and French? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, French ), isofficial, percentage",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "Give the names of nations that speak both English and French.",
        "context": "Give the names of nations that speak both English and French. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, French ), isofficial, percentage",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 where t2.language = 'English' intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French'",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "What are the names of nations where both English and French are official languages?",
        "context": "What are the names of nations where both English and French are official languages? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, French ), isofficial, percentage",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and t2.isofficial = \"T\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\" and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\"",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "Give the names of countries with English and French as official languages.",
        "context": "Give the names of countries with English and French as official languages. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, French ), isofficial, percentage",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and t2.isofficial = \"T\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\" and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct t1.continent) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Chinese\"",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "context": "What is the number of distinct continents where Chinese is spoken? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( Chinese ), isofficial, percentage",
        "label": "world_1 | select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Chinese\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where code = \"China\"",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "How many continents speak Chinese?",
        "context": "How many continents speak Chinese? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( Chinese ), isofficial, percentage",
        "label": "world_1 | select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Chinese\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.region from country as t1 join countrylanguage as t2 on",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "context": "What are the regions that use English or Dutch? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, Dutch ), isofficial, percentage",
        "label": "world_1 | select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" or t2.language = \"Dutch\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select distinct t1.region from country as t1 join countrylanguage as t2 on t1.countrycode",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "context": "Which regions speak Dutch or English? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, Dutch ), isofficial, percentage",
        "label": "world_1 | select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" or t2.language = \"Dutch\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on",
        "query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "context": "What are the countries where either English or Dutch is the official language? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, Dutch ), isofficial, percentage",
        "label": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from country as t1 join countrylanguage as t2 on",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "question": "Which countries have either English or Dutch as an official language?",
        "context": "Which countries have either English or Dutch as an official language? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English, Dutch ), isofficial, percentage",
        "label": "world_1 | select * from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and isofficial = \"T\" union select * from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\" and isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by t2.language order by count(*) desc limit 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "context": "Which language is the most popular on the Asian continent? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = \"Asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by t2.language order by count(*) desc limit 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "context": "What is the language that is used by the largest number of Asian nations? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = \"Asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select distinct t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = 'Republic' group by t2.language having count(*) = 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "context": "Which languages are spoken by only one country in republic governments? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = \"Republic\" group by t2.language having count(*) = 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select distinct t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = 'Republic' group by t2.language having count(*) = 1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "What languages are only used by a single country with a republic government?",
        "context": "What languages are only used by a single country with a republic government? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = \"Republic\" group by t2.language having count(*) = 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\" order by t1.population desc limit 1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the city with the largest population that uses English.",
        "context": "Find the city with the largest population that uses English. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select t1.name, t1.population from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\" order by t1.population desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\" group by t1.name order by count(*) desc limit 1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "context": "What is the most populace city that speaks English? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select t1.name, t1.population from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\" order by t1.population desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "context": "Find the name, population and expected life length of asian country with the largest area? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, population, lifeexpectancy from country where continent = 'Asia' group by name order by sum(surfacearea) desc limit 1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "context": "What are the name, population, and life expectancy of the largest Asian country by land? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(t1.lifeexpectancy) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language!= \"English\"",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "context": "What is average life expectancy in the countries where English is not the official language? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and t2.isofficial = \"T\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(t1.lifeexpectancy) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language!= \"English\"",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "context": "Give the mean life expectancy of countries in which English is not the official language. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" and t2.isofficial = \"T\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(population) from country where countrycode not in (select countrycode from country",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "What is the total number of people living in the nations that do not use English?",
        "context": "What is the total number of people living in the nations that do not use English? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where countrycode not in (select countrycode from country",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "How many people live in countries that do not speak English?",
        "context": "How many people live in countries that do not speak English? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = 'Beatrice'",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "context": "What is the official language spoken in the country whose head of state is Beatrix? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Beatrix\" and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = 'Beatrice'",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "context": "What is the official language used in the country the name of whose head of state is Beatrix. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Beatrix\" and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from countrylanguage where countrycode = 1930",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "context": "What is the total number of unique official languages spoken in the countries that are founded before 1930? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(distinct language) from countrylanguage where countrycode = \"1930\"",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "context": "For the countries founded before 1930, what is the total number of distinct official languages? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where indepyear < 1930 and t2.isofficial = \"T\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where surfacearea > (select max(surfacearea) from country where continent = 'Europe')",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "context": "What are the countries that have greater surface area than any country in Europe? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where surfacearea > (select min(surfacearea) from country where continent = \"Europe\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where surfacearea > (select max(surfacearea) from country where continent = 'Europe')",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "Which countries have greater area than that of any country in Europe?",
        "context": "Which countries have greater area than that of any country in Europe? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where surfacearea > (select min(surfacearea) from country where continent = \"Europe\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where continent = 'Africa' and population < (select max(population) from country where continent = 'Asia')",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "context": "What are the African countries that have a population less than any country in Asia? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia, Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where continent = \"Africa\" and population < (select max(population) from country where continent = \"Asia\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where population < (select max(population) from country where continent = 'Africa')",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "context": "Which African countries have a smaller population than that of any country in Asia? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia, Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where continent = \"Africa\" and population < (select min(population) from country where continent = \"Asia\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where population > (select max(population) from country where continent = 'Africa')",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "context": "Which Asian countries have a population that is larger than any country in Africa? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where continent = \"Asia\" and population > (select max(population) from country where continent = \"Africa\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where population > (select max(population) from country where continent = 'Africa')",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "context": "What are the Asian countries which have a population larger than that of any country in Africa? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where continent = \"Asia\" and population > (select min(population) from country where continent = \"Africa\")",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from country",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the country codes for countries that do not speak English?",
        "context": "What are the country codes for countries that do not speak English? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select countrycode from countrylanguage except select countrycode from countrylanguage where language = \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select code from country where language!= 'English' ",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the country codes for countries that do not speak English.",
        "context": "Return the country codes for countries that do not speak English. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select countrycode from countrylanguage except select countrycode from countrylanguage where language = \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language!= \"English\"",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "What are the country codes of countries where people use languages other than English?",
        "context": "What are the country codes of countries where people use languages other than English? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select distinct countrycode from countrylanguage where language!= \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language!= \"English\"",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "context": "Give the country codes for countries in which people speak langauges that are not English. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select distinct countrycode from countrylanguage where language!= \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select code from country except select countrycode from countrylanguage where language = \"English\" and governmentform!= \"Republika S",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "context": "What are the codes of the countries that do not speak English and whose government forms are not Republic? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select code from country where governmentform!= \"Republic\" except select countrycode from countrylanguage where language = \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select code from country except select countrycode from countrylanguage where language = \"English\" and governmentform = \"Royale",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "context": "Return the codes of countries that do not speak English and do not have Republics for governments. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select code from country where governmentform!= \"Republic\" except select countrycode from countrylanguage where language = \"English\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = \"Europe\" and t2.language",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "Which cities are in European countries where English is not the official language?",
        "context": "Which cities are in European countries where English is not the official language? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select distinct t2.name from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = \"Europe\" except select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\"",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "context": "What are the names of cities in Europe for which English is not the official language? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( English ), isofficial, percentage",
        "label": "world_1 | select distinct t2.name from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select distinct t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = 'Asia' and",
        "query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "context": "Which unique cities are in Asian countries where Chinese is the official language? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( Chinese ), isofficial, percentage",
        "label": "world_1 | select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select distinct t1.name from city as t1 join country as t2 on t1.countrycode = t2.countrycode",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "context": "Return the different names of cities that are in Asia and for which Chinese is the official language. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( Chinese ), isofficial, percentage",
        "label": "world_1 | select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 'T' and t2.language = 'Chinese' and t1.continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, indepyear, surfacearea from country order by population asc limit 1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "context": "What are the name, independence year, and surface area of the country with the smallest population? | world_1 | city : id, name ( Independence ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name, surfacearea, indepyear from country order by population limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, indepyear, surfacearea from country order by population asc limit 1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "context": "Give the name, year of independence, and surface area of the country that has the lowest population. | world_1 | city : id, name ( Independence ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name, surfacearea, indepyear from country order by population limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select population, name, headofstate from country order by surfacearea desc limit 1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "context": "What are the population, name and leader of the country with the largest area? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name, population, headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, population, headofstate from country order by surfacearea desc limit 1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "context": "Give the name, population, and head of state for the country that has the largest area. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name, population, headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name, count(distinct t2.language) from country as t1 join countrylanguage as t2 on",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "context": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.name, count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.code having count(*) > 2",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "context": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*), district from city where population > (select avg(population) from city) group by district",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "context": "Find the number of cities in each district whose population is greater than the average population of cities? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(*), district from city where population > (select avg(population) from city) group by district",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*), district from city where population > (select avg(population) from city) group by district",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "context": "How many cities in each district have a population that is above the average population across all cities? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(*), district from city where population > (select avg(population) from city) group by district",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select t1.governmentform, sum(t2.population) from country as t1 join city as t2 on t1.code = t2.countrycode group by t1.governmentform having avg(t1.lifeexpectancy) > 72",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "context": "Find the government form name and total population for each government form whose average life expectancy is longer than 72. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select governmentform, sum(population) from country where lifeexpectancy > 72 group by governmentform",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "context": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select avg(lifeexpectancy), sum(population) from country where lifeexpectancy < 72 group by continent",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "context": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select continent, sum(population), avg(lifeexpectancy) from country where avg(lifeexpectancy) < 72 group by continent",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "context": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, surfacearea from country order by surfacearea desc limit 5",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "context": "What are the names and areas of countries with the top 5 largest area? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name, surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name, surfacearea from country order by population desc limit 5",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "context": "Return the names and surface areas of the 5 largest countries. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name, surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country order by population desc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of countries with the top 3 largest population?",
        "context": "What are names of countries with the top 3 largest population? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country order by population desc limit 3",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country order by population desc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "context": "Return the names of the 3 most populated countries. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country order by population desc limit 3",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country order by population asc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "context": "What are the names of the nations with the 3 lowest populations? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country order by population asc limit 3",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country order by population asc limit 3",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "Return the names of the 3 countries with the fewest people.",
        "context": "Return the names of the 3 countries with the fewest people. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country order by population asc limit 3",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where continent = 'Asia'",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "how many countries are in Asia?",
        "context": "how many countries are in Asia? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(*) from country where continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from country where continent = 'Asia'",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "Count the number of countries in Asia.",
        "context": "Count the number of countries in Asia. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select count(*) from country where continent = \"Asia\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where continent = 'Europe' and population = 80000",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "context": "What are the names of the countries that are in the continent of Europe and have a population of 80000? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where continent = \"Europe\" and population = \"80000\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from country where continent = 'Europe' and population = 80000",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "context": "Give the names of countries that are in Europe and have a population equal to 80000. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from country where continent = \"Europe\" and population = \"80000\"",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000",
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "context": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000? | world_1 | city : id, name ( Americana ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( North America ), region ( North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population), avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select sum(population), avg(surfacearea) from country where region = 'North America' and surfacearea > 3000",
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "context": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000. | world_1 | city : id, name ( Americana ), countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent ( North America ), region ( North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select sum(population), avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from city where population between 160000 and 900000",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "context": "What are the cities whose population is between 160000 and 900000? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from city where population between 160000 and 900000",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select name from city where population between 160000 and 900000",
        "query": "select name from city where population between 160000 and 900000",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "context": "Return the names of cities that have a population between 160000 and 900000. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select name from city where population between 160000 and 900000",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language from countrylanguage group by language order by count(*) desc limit 1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of countries?",
        "context": "Which language is spoken by the largest number of countries? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select language from countrylanguage group by language order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language from countrylanguage group by language order by count(*) desc limit 1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most countries.",
        "context": "Give the language that is spoken in the most countries. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select language from countrylanguage group by language order by count(*) desc limit 1",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select language from countrylanguage order by percentage desc limit 1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "context": "What is the language spoken by the largest percentage of people in each country? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode, language from countrylanguage order by percentage desc limit 1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "context": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language, isofficial, percentage",
        "label": "world_1 | select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage where language = \"Spanish\" group by countrycode order by percentage desc limit 1",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "context": "What is the total number of countries where Spanish is spoken by the largest percentage of people? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( Spanish ), isofficial, percentage",
        "label": "world_1 | select count(*), max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select count(*) from countrylanguage where language = \"Spanish\" group by countrycode",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "context": "Count the number of countries for which Spanish is the predominantly spoken language. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( Spanish ), isofficial, percentage",
        "label": "world_1 | select count(*), max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language = \"Spanish\" group by countrycode order by percentage desc limit 1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "context": "What are the codes of countries where Spanish is spoken by the largest percentage of people? | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( Spanish ), isofficial, percentage",
        "label": "world_1 | select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "world_1 | select countrycode from countrylanguage where language = \"Spanish\" group by countrycode having count(*) >= 1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "context": "Return the codes of countries for which Spanish is the predominantly spoken language. | world_1 | city : id, name, countrycode foreign key country, district, population | sqlite_sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode foreign key country, language ( Spanish ), isofficial, percentage",
        "label": "world_1 | select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode",
        "db_id": "world_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "city",
            "sqlite_sequence",
            "country",
            "countrylanguage"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "ID",
                "Name",
                "CountryCode",
                "District",
                "Population",
                "name",
                "seq",
                "Code",
                "Name",
                "Continent",
                "Region",
                "SurfaceArea",
                "IndepYear",
                "Population",
                "LifeExpectancy",
                "GNP",
                "GNPOld",
                "LocalName",
                "GovernmentForm",
                "HeadOfState",
                "Capital",
                "Code2",
                "CountryCode",
                "Language",
                "IsOfficial",
                "Percentage"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                3,
                23
            ],
            "other_column_id": [
                8,
                8
            ]
        }
    },
    {
        "prediction": "orchestra | select count(*) from conductor",
        "query": "SELECT count(*) FROM conductor",
        "question": "How many conductors are there?",
        "context": "How many conductors are there? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select count(*) from conductor",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count(*) from conductor",
        "query": "SELECT count(*) FROM conductor",
        "question": "Count the number of conductors.",
        "context": "Count the number of conductors. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select count(*) from conductor",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor order by age asc",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "context": "List the names of conductors in ascending order of age. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select name from conductor order by age asc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor order by age",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "context": "What are the names of conductors, ordered by age? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select name from conductor order by age asc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor where nationality!= \"USA\"",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "context": "What are the names of conductors whose nationalities are not \"USA\"? | orchestra | conductor : conductor_id, name, age, nationality ( USA ), year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select name from conductor where nationality!= 'USA'",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor where nationality!= \"USA\"",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "context": "Return the names of conductors that do not have the nationality \"USA\". | orchestra | conductor : conductor_id, name, age, nationality ( USA ), year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select name from conductor where nationality!= 'USA'",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra order by year_of_founded desc",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "context": "What are the record companies of orchestras in descending order of years in which they were founded? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select record_company from orchestra order by year_of_founded desc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra order by year_of_founded desc",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "context": "Return the record companies of orchestras, sorted descending by the years in which they were founded. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select record_company from orchestra order by year_of_founded desc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select avg(attendance) from show",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average attendance of shows?",
        "context": "What is the average attendance of shows? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select avg(attendance) from show",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select avg(attendance) from show",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average attendance across all shows.",
        "context": "Return the average attendance across all shows. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select avg(attendance) from show",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "context": "What are the maximum and minimum share of performances whose type is not \"Live final\". | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type ( Live final ), date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "context": "Return the maximum and minimum shares for performances that do not have the type \"Live final\". | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type ( Live final ), date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select max(share), min(share) from performance where type!= \"Live final\"",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count(distinct nationality) from conductor",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "How many different nationalities do conductors have?",
        "context": "How many different nationalities do conductors have? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select count(distinct nationality) from conductor",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count(distinct nationality) from conductor",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "Count the number of different nationalities of conductors.",
        "context": "Count the number of different nationalities of conductors. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select count(distinct nationality) from conductor",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor order by year_of_work desc",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "context": "List names of conductors in descending order of years of work. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select name from conductor order by year_of_work desc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor order by year_of_work desc",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "context": "What are the names of conductors, sorted descending by the number of years they have worked? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select name from conductor order by year_of_work desc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor order by year_of_work desc limit 1",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "context": "List the name of the conductor with the most years of work. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select name from conductor order by year_of_work desc limit 1",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "context": "What is the name of the conductor who has worked the greatest number of years? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name, t1.orchestra_id from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "context": "Show the names of conductors and the orchestras they have conducted. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select t1.name, t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name, t1.orchestra_id from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "context": "What are the names of conductors as well as the corresonding orchestras that they have conducted? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select t1.name, t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id group by t2.name having count(*) > 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "context": "Show the names of conductors that have conducted more than one orchestras. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id group by t2.name having count(*) > 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "context": "What are the names of conductors who have conducted at more than one orchestra? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id group by t2.name order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "context": "Show the name of the conductor that has conducted the most number of orchestras. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id group by t2.name order by count(*) desc limit 1",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "context": "What is the name of the conductor who has conducted the most orchestras? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id where t1.year_of_founded > 2008",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "context": "Please show the name of the conductor that has conducted orchestras founded after 2008. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id where t1.year_of_founded > 2008",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "context": "What are the names of conductors who have conducted orchestras founded after the year 2008? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id where year_of_founded > 2008",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company, count(*) from orchestra group by record_company",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "context": "Please show the different record companies and the corresponding number of orchestras. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select record_company, count(*) from orchestra group by record_company",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company, count(*) from orchestra group by record_company",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "context": "How many orchestras does each record company manage? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select record_company, count(*) from orchestra group by record_company",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "context": "Please show the record formats of orchestras in ascending order of count. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select major_record_format from orchestra group by major_record_format order by count(*)",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "context": "What are the major record formats of orchestras, sorted by their frequency? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "context": "List the record company shared by the most number of orchestras. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "context": "What is the record company used by the greatest number of orchestras? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "context": "List the names of orchestras that have no performance. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "context": "What are the orchestras that do not have any performances? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "context": "Show the record companies shared by orchestras founded before 2003 and after 2003. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "context": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "context": "Find the number of orchestras whose record format is \"CD\" or \"DVD\". | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format ( DVD, CD ) | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "context": "Count the number of orchestras that have CD or DVD as their record format. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format ( DVD, CD ) | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t1.year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t1.year_of_founded having count(*) > 1",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "context": "Show the years in which orchestras that have given more than one performance are founded. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t2.orchestra_id having count(*) > 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "orchestra | select t1.year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t1.year_of_founded having count(*) > 1",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "context": "What are years of founding for orchestras that have had more than a single performance? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance",
        "label": "orchestra | select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t2.orchestra_id having count(*) > 1",
        "db_id": "orchestra",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "conductor",
            "orchestra",
            "performance",
            "show"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3
            ],
            "column_name": [
                "*",
                "Conductor_ID",
                "Name",
                "Age",
                "Nationality",
                "Year_of_Work",
                "Orchestra_ID",
                "Orchestra",
                "Conductor_ID",
                "Record_Company",
                "Year_of_Founded",
                "Major_Record_Format",
                "Performance_ID",
                "Orchestra_ID",
                "Type",
                "Date",
                "Official_ratings_(millions)",
                "Weekly_rank",
                "Share",
                "Show_ID",
                "Performance_ID",
                "If_first_show",
                "Result",
                "Attendance"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8,
                13,
                20
            ],
            "other_column_id": [
                1,
                6,
                12
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "How many high schoolers are there?",
        "context": "How many high schoolers are there? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select count(*) from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "Count the number of high schoolers.",
        "context": "Count the number of high schoolers. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select count(*) from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name, grade from highschooler",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "context": "Show the names and grades of each high schooler. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select name, grade from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name, grade from highschooler",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "What are the names and grades for each high schooler?",
        "context": "What are the names and grades for each high schooler? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select name, grade from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select distinct grade from highschooler",
        "query": "SELECT grade FROM Highschooler",
        "question": "Show all the grades of the high schoolers.",
        "context": "Show all the grades of the high schoolers. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select distinct grade from highschooler",
        "query": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each high schooler?",
        "context": "What is the grade of each high schooler? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade from highschooler",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select distinct grade from highschooler where name = 'Kyle'",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What grade is Kyle in?",
        "context": "What grade is Kyle in? | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade from highschooler where name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade from highschooler where name = 'Kyle'",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Return the grade for the high schooler named Kyle.",
        "context": "Return the grade for the high schooler named Kyle. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade from highschooler where name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where grade = 10",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "Show the names of all high schoolers in grade 10.",
        "context": "Show the names of all high schoolers in grade 10. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select name from highschooler where grade = 10",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where grade = 10",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "What are the names of all high schoolers in grade 10?",
        "context": "What are the names of all high schoolers in grade 10? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select name from highschooler where grade = 10",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select id from highschooler where name = 'Kyle'",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the high schooler named Kyle.",
        "context": "Show the ID of the high schooler named Kyle. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select id from highschooler where name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select id from highschooler where name = 'Kyle'",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What is Kyle's id?",
        "context": "What is Kyle's id? | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select id from highschooler where name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler where grade = 9 or grade = 10",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "context": "How many high schoolers are there in grade 9 or 10? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select count(*) from highschooler where grade = 9 or grade = 10",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler where grade = 9 or grade = 10",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "context": "Count the number of high schoolers in grades 9 or 10. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select count(*) from highschooler where grade = 9 or grade = 10",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade, count(*) from highschooler group by grade",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "Show the number of high schoolers for each grade.",
        "context": "Show the number of high schoolers for each grade. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade, count(*) from highschooler group by grade",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*), grade from highschooler group by grade",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "How many high schoolers are in each grade?",
        "context": "How many high schoolers are in each grade? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade, count(*) from highschooler group by grade",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade from highschooler group by grade order by count(*) desc limit 1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Which grade has the most high schoolers?",
        "context": "Which grade has the most high schoolers? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade from highschooler group by grade order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade from highschooler group by grade order by count(*) desc limit 1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "context": "Return the grade that has the greatest number of high schoolers. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade from highschooler group by grade order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select grade from highschooler group by grade having count(*) >= 4",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "context": "Show me all grades that have at least 4 students. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade from highschooler group by grade having count(*) >= 4",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select distinct grade from highschooler group by grade having count(*) >= 4",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more high schoolers?",
        "context": "Which grades have 4 or more high schoolers? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select grade from highschooler group by grade having count(*) >= 4",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id, count(*) from friend group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "context": "Show the student IDs and numbers of friends corresponding to each. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select student_id, count(*) from friend group by student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*), t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.name",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "context": "How many friends does each student have? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select student_id, count(*) from friend group by student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name, count(*) from highschooler as t1 join friend as t2 on t1.id = t2.friend_id group by t2.friend_id",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "context": "Show the names of high school students and their corresponding number of friends. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*), t1.name from highschooler as t1 join friend as t2 on t1.id = t2.friend_id group by t1.name",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "context": "What are the names of the high schoolers and how many friends does each have? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name, count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.friend_id group by t2.friend_id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "context": "What is the name of the high schooler who has the greatest number of friends? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t2.student_id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the high school student with the most friends.",
        "context": "Return the name of the high school student with the most friends. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.friend_id group by t2.friend_id having count(*) >= 3",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "context": "Show the names of high schoolers who have at least 3 friends. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 3",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.friend_id group by t2.friend_id having count(*) >= 3",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "context": "What are the names of high schoolers who have 3 or more friends? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 3",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t4.name from highschooler as t1 join friend as t2 on t1.id = t2.friend_id join highschooler as t3 on t2.student_id =",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "context": "Show the names of all of the high schooler Kyle's friends. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t3.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id join highschooler as t3 on t1.friend_id = t3.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t2.friend_id from highschooler as t1 join friend as t2 on t1.id = t2.friend_id where t1.name = 'Kyle'",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the names of friends of the high school student Kyle.",
        "context": "Return the names of friends of the high school student Kyle. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t3.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id join highschooler as t3 on t1.friend_id = t3.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(t2.friend_id) from highschooler as t1 join friend as t2 on t1.id = t2.friend_id where t1.name = 'Kyle'",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many friends does the high school student Kyle have?",
        "context": "How many friends does the high school student Kyle have? | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler as t1 join friend as t2 on t1.id = t2.friend_id where t1.name = 'Kyle'",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Count the number of friends Kyle has.",
        "context": "Count the number of friends Kyle has. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select count(*) from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id from highschooler",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "Show ids of all students who do not have any friends.",
        "context": "Show ids of all students who do not have any friends. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select id from highschooler except select student_id from friend",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id from highschooler",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "What are the ids of high school students who do not have friends?",
        "context": "What are the ids of high school students who do not have friends? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select id from highschooler except select student_id from friend",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where id not in (select student_id from friend)",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "Show names of all high school students who do not have any friends.",
        "context": "Show names of all high school students who do not have any friends. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where id not in (select student_id from friend)",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "What are the names of students who have no friends?",
        "context": "What are the names of students who have no friends? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id from friend intersect select liked_id from likes",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "context": "Show the ids of high schoolers who have friends and are also liked by someone else. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id from friend intersect select student_id from likes",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "What are the ids of students who both have friends and are liked?",
        "context": "What are the ids of students who both have friends and are liked? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id intersect select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "context": "Show name of all students who have some friends and also are liked by someone else. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.friend_id intersect select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.liked_id",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "context": "What are the names of high schoolers who both have friends and are liked? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id = t2.id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*), student_id from likes group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "context": "Count the number of likes for each student id. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select student_id, count(*) from likes group by student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select student_id, count(*) from likes group by student_id",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "How many likes correspond to each student id?",
        "context": "How many likes correspond to each student id? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select student_id, count(*) from likes group by student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name, count(*) from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "context": "Show the names of high schoolers who have likes, and numbers of likes for each. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name, count(*) from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "context": "What are the names of high schoolers who have likes, and how many likes does each have? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name, count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "context": "What is the name of the high schooler who has the greatest number of likes? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id order by count(*) desc limit 1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the student with the most likes.",
        "context": "Give the name of the student with the most likes. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id having count(*) >= 2",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have at least 2 likes.",
        "context": "Show the names of students who have at least 2 likes. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 2",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id having count(*) >= 2",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have 2 or more likes?",
        "context": "What are the names of students who have 2 or more likes? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from likes as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 2",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where grade > 5 intersect select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 2",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "context": "Show the names of students who have a grade higher than 5 and have at least 2 friends. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.grade > 5 group by t1.student_id having count(*) >= 2",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select name from highschooler where grade > 5 intersect select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id group by t1.student_id having count(*) >= 2",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "context": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select t2.name from friend as t1 join highschooler as t2 on t1.student_id = t2.id where t2.grade > 5 group by t1.student_id having count(*) >= 2",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler as t1 join likes as t2 on t1.id = t2.liked_id where t1.name = 'Kyle'",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many likes does Kyle have?",
        "context": "How many likes does Kyle have? | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select count(*) from highschooler as t1 join likes as t2 on t1.id = t2.liked_id where t1.name = 'Kyle'",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "context": "Return the number of likes that the high schooler named Kyle has. | network_1 | highschooler : id, name ( Kyle ), grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select count(*) from likes as t1 join highschooler as t2 on t1.student_id = t2.id where t2.name = \"Kyle\"",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select avg(t1.grade) from highschooler as t1 join friend as t2 on t1.id = t2.friend_id",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the average grade of all students who have some friends.",
        "context": "Find the average grade of all students who have some friends. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id = t2.id)",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select avg(t1.grade) from highschooler as t1 join friend as t2 on t1.id = t2.friend_id",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the average grade of students who have friends?",
        "context": "What is the average grade of students who have friends? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id = t2.id)",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select min(grade) from highschooler where id not in (select student_id from friend)",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the minimum grade of students who have no friends.",
        "context": "Find the minimum grade of students who have no friends. | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id = t2.id)",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "network_1 | select min(grade) from highschooler where id not in (select student_id from friend)",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the lowest grade of students who do not have any friends?",
        "context": "What is the lowest grade of students who do not have any friends? | network_1 | highschooler : id, name, grade | friend : student_id foreign key highschooler, friend_id foreign key highschooler | likes : student_id foreign key highschooler, liked_id foreign key highschooler",
        "label": "network_1 | select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id = t2.id)",
        "db_id": "network_1",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Highschooler",
            "Friend",
            "Likes"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            "column_name": [
                "*",
                "ID",
                "name",
                "grade",
                "student_id",
                "friend_id",
                "student_id",
                "liked_id"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                5,
                4,
                6,
                7
            ],
            "other_column_id": [
                1,
                1,
                1,
                1
            ]
        }
    },
    {
        "prediction": "dog_kennels | select state from owners intersect select state from professionals",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both owners and professionals living there?",
        "context": "Which states have both owners and professionals living there? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select state from owners intersect select state from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select state from owners intersect select state from professionals",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both owners and professionals live.",
        "context": "Find the states where both owners and professionals live. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select state from owners intersect select state from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age) from dogs where dog_id in (select dog_id from treatments)",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "context": "What is the average age of the dogs who have gone through any treatments? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age) from dogs where dog_id in (select dog_id from treatments)",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through treatments.",
        "context": "Find the average age of the dogs who went through treatments. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having t1.state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "context": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Indiana ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Indiana ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select professional_id, last_name, cell_number from professionals where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having t1.state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id having count(*) > 2",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "context": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Indiana ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Indiana ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select professional_id, last_name, cell_number from professionals where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name from dogs where dog_id not in (select dog_id from treatments where cost_of_treatment > 1000)",
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "context": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name from dogs where owner_id not in (select dog_id from treatments group by dog_id having max(cost_of_treatment) > 1000)",
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "context": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name from professionals union select first_name from owners except select t1.first_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "context": "Which first names are used for professionals or owners but are not used as dog names? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name from professionals union select first_name from owners except select t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id join dogs as t3 on t1.dog_id = t3.dog_id",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "context": "Find the first names that are used for professionals or owners but are not used as dog names. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select professional_id, role_code, email_address from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join dogs as t3 on t2.dog_id = t3.dog_id",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "context": "Which professional did not operate any treatment on dogs? List the professional's id, role and email. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select professional_id, role_code, email_address from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select professional_id, role_code, email_address from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "context": "Give me the id, role and email of the professionals who did not perform any treatment on dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select professional_id, role_code, email_address from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "context": "Which owner owns the most dogs? List the owner id, first name and last name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "context": "Return the owner id, first name and last name of the owner who has the most dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.owner_id, t2.first_name, t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "context": "Which professionals have done at least two treatments? List the professional's id, role, and first name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "context": "What are the id, role, and first name of the professionals who have performed two or more treatments? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_code order by count(*) desc limit 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "context": "What is the name of the breed with the most dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select breed_name from breeds group by breed_code order by count(*) desc limit 1",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "context": "Which breed do the most dogs have? Give me the breed name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "context": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "context": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(t2.cost_of_treatment) asc limit 1",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "context": "What is the description of the treatment type that costs the least money in total? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(t2.cost_of_treatment) limit 1",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "context": "Give me the description of the treatment type whose total cost is the lowest. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.cost_of_treatment",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "context": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.cost_of_treatment",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "context": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "context": "Which professionals have done at least two types of treatments? List the professional id and cell phone. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "context": "Find the id and cell phone of the professionals who operate two or more types of treatments. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t1.cost_of_treatment < (select avg(cost_of_treatment) from treatments)",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "context": "What are the first name and last name of the professionals who have done treatment with cost below average? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select distinct t1.first_name, t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment < ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t1.cost_of_treatment < (select avg(cost_of_treatment) from treatments)",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "context": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select distinct t1.first_name, t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment < ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_of_treatment, first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "context": "List the date of each treatment, together with the first name of the professional who operated it. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "context": "What are the date and the operating professional's first name of each treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "context": "List the cost of each treatment and the corresponding treatment type description. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "What are the cost and treatment type description of each treatment?",
        "context": "What are the cost and treatment type description of each treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name, t1.size_code from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "context": "List each owner's first name, last name, and the size of his for her dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t2.last_name, t1.size_code from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "context": "What are each owner's first name, last name, and the size of their dog? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t1.name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "context": "List pairs of the owner's first name and the dogs's name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.first_name, t1.name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name and their dogs's name?",
        "context": "What are each owner's first name and their dogs's name? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.name, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id order by t1.breed_code limit 1",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "context": "List the names of the dogs of the rarest breed and the treatment dates of them. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.name, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.name, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = (select breed_code from dogs group by breed_code order by count(*) limit 1)",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "context": "Which dogs are of the rarest breed? Show their names and treatment dates. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.name, t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.breed_code = ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name, last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id where t2.state = 'Virginia'",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "context": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Virginia ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name, last_name from owners where state = 'Virginia' union select t2.first_name, t2.name from owners as t1 join dogs as t2",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "context": "Find the first names of owners living in Virginia and the names of dogs they own. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Virginia ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_departed from dogs where dog_id in (select dog_id from treatments)",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "context": "What are the arriving date and the departing date of the dogs who have gone through a treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_departed from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "context": "Find the arriving date and the departing date of the dogs that received a treatment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.age asc limit 1",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the last name of the owner owning the youngest dog.",
        "context": "List the last name of the owner owning the youngest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id order by t1.age limit 1",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "context": "Who owns the youngest dog? Give me his or her last name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address from professionals where state = \"Hawaii\" or state = \"Wisconsin\"",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "context": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Wisconsin ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Wisconsin, Hawaii ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address from professionals where state = \"Hawaii\" or state = \"Wisconsin\"",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "context": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state ( Wisconsin ), zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state ( Wisconsin, Hawaii ), zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_departed from dogs",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "context": "What are the arriving date and the departing date of all the dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select date_arrived, date_departed from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select date_arrived, date_departed from dogs",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arrival date and the departure date for all the dogs.",
        "context": "List the arrival date and the departure date for all the dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select date_arrived, date_departed from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(distinct dog_id) from treatments",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many dogs went through any treatments?",
        "context": "How many dogs went through any treatments? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(distinct dog_id) from treatments",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of dogs that went through a treatment.",
        "context": "Count the number of dogs that went through a treatment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(distinct professional_id) from treatments",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many professionals have performed any treatment to dogs?",
        "context": "How many professionals have performed any treatment to dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(distinct professional_id) from treatments",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of professionals who have ever treated dogs.",
        "context": "Find the number of professionals who have ever treated dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select role_code, street, city, state from professionals where city like '%west%'",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "context": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select role_code, street, city, state from professionals where city like '%west%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select role_code, street, city, state from professionals where city like '%west%'",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "context": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select role_code, street, city, state from professionals where city like '%west%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name, last_name, email_address from owners where state like '%north%'",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "context": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select first_name, last_name, email_address from owners where state like '%north%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select first_name, last_name, email_address from owners where state like '%north%'",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "context": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select first_name, last_name, email_address from owners where state like '%north%'",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where age < (select avg(age) from dogs)",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many dogs have an age below the average?",
        "context": "How many dogs have an age below the average? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(*) from dogs where age < ( select avg(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where age < (select avg(age) from dogs)",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of dogs of an age below the average.",
        "context": "Count the number of dogs of an age below the average. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(*) from dogs where age < ( select avg(age) from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select max(cost_of_treatment) from treatments",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "context": "How much does the most recent treatment cost? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "context": "Show me the cost of the most recently performed treatment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many dogs have not gone through any treatment?",
        "context": "How many dogs have not gone through any treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from dogs where dog_id not in (select dog_id from treatments)",
        "query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "context": "Tell me the number of dogs that have not received any treatment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from owners where owner_id not in ( select owner_id from dogs )",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many owners temporarily do not have any dogs?",
        "context": "How many owners temporarily do not have any dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(*) from owners where owner_id not in ( select owner_id from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from owners where owner_id not in (select owner_id from dogs)",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "context": "Find the number of owners who do not own any dogs at this moment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(*) from owners where owner_id not in ( select owner_id from dogs )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "context": "How many professionals did not operate any treatment on dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "context": "Find the number of professionals who have not treated any dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select count(*) from professionals where professional_id not in ( select professional_id from treatments )",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name, age, weight from dogs where abandoned_yn = 1",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "context": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select name, age, weight from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select name, age, weight from dogs where abandoned_yn = 1",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "context": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select name, age, weight from dogs where abandoned_yn = 1",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age) from dogs",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "What is the average age of all the dogs?",
        "context": "What is the average age of all the dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select avg(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select avg(age) from dogs",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "Compute the average age of all the dogs.",
        "context": "Compute the average age of all the dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select avg(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select age from dogs order by age desc limit 1",
        "query": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest dog?",
        "context": "What is the age of the oldest dog? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select max(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select age from dogs order by age desc limit 1",
        "query": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "context": "Tell me the age of the oldest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select max(age) from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_type, charge_amount from charges group by charge_type",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "context": "How much does each charge type costs? List both charge type and amount. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select charge_type, charge_amount from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_type, charge_amount from charges group by charge_type",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "context": "List each charge type and its amount. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select charge_type, charge_amount from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_type, max(charge_amount) from charges group by charge_type order by sum(charge_amount) desc limit 1",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "context": "How much does the most expensive charge type costs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select max(charge_amount) from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select charge_amount from charges order by charge_type desc limit 1",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "context": "What is the charge amount of the most expensive charge type? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select max(charge_amount) from charges",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address, cell_number, home_phone from professionals",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "context": "List the email, cell phone and home phone of all the professionals. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select email_address, cell_number, home_phone from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select email_address, cell_number, home_phone from professionals",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "What are the email, cell phone and home phone of each professional?",
        "context": "What are the email, cell phone and home phone of each professional? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select email_address, cell_number, home_phone from professionals",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select distinct breed_code, size_code from dogs",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "context": "What are all the possible breed type and size type combinations? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select distinct breed_code, size_code from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select distinct breed_code, size_code from dogs",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "context": "Find the distinct breed type and size type combinations for dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select distinct breed_code, size_code from dogs",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "context": "List the first name of all the professionals along with the description of the treatment they have done. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select distinct t1.first_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "dog_kennels | select t1.first_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "context": "What are each professional's first name and description of the treatment they have performed? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment",
        "label": "dog_kennels | select distinct t1.first_name, t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t2.treatment_type_code = t3.treatment_type_code",
        "db_id": "dog_kennels",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Breeds",
            "Charges",
            "Sizes",
            "Treatment_Types",
            "Owners",
            "Dogs",
            "Professionals",
            "Treatments"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                7,
                7
            ],
            "column_name": [
                "*",
                "breed_code",
                "breed_name",
                "charge_id",
                "charge_type",
                "charge_amount",
                "size_code",
                "size_description",
                "treatment_type_code",
                "treatment_type_description",
                "owner_id",
                "first_name",
                "last_name",
                "street",
                "city",
                "state",
                "zip_code",
                "email_address",
                "home_phone",
                "cell_number",
                "dog_id",
                "owner_id",
                "abandoned_yn",
                "breed_code",
                "size_code",
                "name",
                "age",
                "date_of_birth",
                "gender",
                "weight",
                "date_arrived",
                "date_adopted",
                "date_departed",
                "professional_id",
                "role_code",
                "first_name",
                "street",
                "city",
                "state",
                "zip_code",
                "last_name",
                "email_address",
                "home_phone",
                "cell_number",
                "treatment_id",
                "dog_id",
                "professional_id",
                "treatment_type_code",
                "date_of_treatment",
                "cost_of_treatment"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                21,
                21,
                24,
                23,
                45,
                46,
                47
            ],
            "other_column_id": [
                10,
                10,
                6,
                1,
                20,
                33,
                8
            ]
        }
    },
    {
        "prediction": "singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "context": "How many singers are there? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select count(*) from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select count(*) from singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the count of singers?",
        "context": "What is the count of singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select count(*) from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by net_worth_millions asc",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "context": "List the name of singers in ascending order of net worth. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer order by net_worth_millions asc",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by net_worth_millions asc",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "context": "What are the names of singers ordered by ascending net worth? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer order by net_worth_millions asc",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "context": "What are the birth year and citizenship of singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select birth_year, citizenship from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select birth_year, citizenship from singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "context": "What are the birth years and citizenships of the singers? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select birth_year, citizenship from singer",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where citizenship!= \"France\"",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "context": "List the name of singers whose citizenship is not \"France\". | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship ( France ) | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer where citizenship!= \"France\"",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where citizenship!= \"French\"",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the singers who are not French citizens?",
        "context": "What are the names of the singers who are not French citizens? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer where citizenship!= \"France\"",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where birth_year = 1948 or birth_year = 1949",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "context": "Show the name of singers whose birth year is either 1948 or 1949? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer where birth_year = 1948 or birth_year = 1949",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where birth_year = 1948 or birth_year = 1949",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "context": "What are the names of the singers whose birth years are either 1948 or 1949? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer where birth_year = 1948 or birth_year = 1949",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by net_worth_millions desc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "context": "What is the name of the singer with the largest net worth? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer order by net_worth_millions desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer order by net_worth_millions desc limit 1",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "context": "What is the name of the singer who is worth the most? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer order by net_worth_millions desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship, count(*) from singer group by citizenship",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "context": "Show different citizenship of singers and the number of singers of each citizenship. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select citizenship, count(*) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship, count(*) from singer group by citizenship",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "context": "For each citizenship, how many singers are from that country? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select citizenship, count(*) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "context": "Please show the most common citizenship of singers. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "question": "What is the most common singer citizenship ?",
        "context": "What is the most common singer citizenship? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "context": "Show different citizenships and the maximum net worth of singers of each citizenship. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, what is the maximum net worth?",
        "context": "For each citizenship, what is the maximum net worth? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select citizenship, max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t2.title, t3.name from singer as t1 join song as t2 on t1.singer_id = t2.song_id join singer as t3 on t2.singer_id = t3.singer_id",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "Show titles of songs and names of singers.",
        "context": "Show titles of songs and names of singers. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t2.title, t3.name from singer as t1 join song as t2 on t1.singer_id = t2.song_id join singer as t3 on t2.singer_id = t3.singer_id",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "What are the song titles and singer names?",
        "context": "What are the song titles and singer names? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "context": "Show distinct names of singers that have songs with sales more than 300000. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "context": "what are the different names of the singers that have sales more than 300000? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t2.name from song as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.name having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "context": "Show the names of singers that have more than one song. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t2.name from song as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.name having count(*) > 1",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the singers that have more than one songs?",
        "context": "What are the names of the singers that have more than one songs? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name having count(*) > 1",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select t2.name, sum(t1.sales) from song as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.name",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of singers and the total sales of their songs.",
        "context": "Show the names of singers and the total sales of their songs. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select t1.name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select sum(sales), t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each singer name, what is the total sales for their songs?",
        "context": "For each singer name, what is the total sales for their songs? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select t1.name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "context": "List the name of singers that do not have any song. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "context": "What is the sname of every sing that does not have any song? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select name from singer where singer_id not in (select singer_id from song)",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "context": "Show the citizenship shared by singers with birth year before 1945 and after 1955. | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "context": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? | singer | singer : singer_id, name, birth_year, net_worth_millions, citizenship | song : song_id, title, singer_id foreign key singer, sales, highest_position",
        "label": "singer | select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
        "db_id": "singer",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "singer",
            "song"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            "column_name": [
                "*",
                "Singer_ID",
                "Name",
                "Birth_Year",
                "Net_Worth_Millions",
                "Citizenship",
                "Song_ID",
                "Title",
                "Singer_ID",
                "Sales",
                "Highest_Position"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                8
            ],
            "other_column_id": [
                1
            ]
        }
    },
    {
        "prediction": "real_estate_properties | select count(*) from other_available_features",
        "query": "SELECT count(*) FROM Other_Available_Features",
        "question": "How many available features are there in total?",
        "context": "How many available features are there in total? | real_estate_properties | ref_feature_types : feature_type_code, feature_type_name | ref_property_types : property_type_code, property_type_description | other_available_features : feature_id, feature_type_code foreign key ref_feature_types, feature_name, feature_description | properties : property_id, property_type_code foreign key ref_property_types, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details | other_property_features : property_id foreign key properties, feature_id foreign key other_available_features, property_feature_description",
        "label": "real_estate_properties | select count(*) from other_available_features",
        "db_id": "real_estate_properties",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        }
    },
    {
        "prediction": "real_estate_properties | select t1.feature_type_name from ref_feature_types as t1 join other_available_features as t2 on t1.feature_type_code = t2.feature_type_code where t2.feature_name = \"AirCon\"",
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "question": "What is the feature type name of feature AirCon?",
        "context": "What is the feature type name of feature AirCon? | real_estate_properties | ref_feature_types : feature_type_code, feature_type_name | ref_property_types : property_type_code, property_type_description | other_available_features : feature_id, feature_type_code foreign key ref_feature_types, feature_name ( AirCon ), feature_description | properties : property_id, property_type_code foreign key ref_property_types, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details | other_property_features : property_id foreign key properties, feature_id foreign key other_available_features, property_feature_description",
        "label": "real_estate_properties | select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code = t2.feature_type_code where t1.feature_name = \"AirCon\"",
        "db_id": "real_estate_properties",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        }
    },
    {
        "prediction": "real_estate_properties | select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code",
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "context": "Show the property type descriptions of properties belonging to that code. | real_estate_properties | ref_feature_types : feature_type_code, feature_type_name | ref_property_types : property_type_code, property_type_description | other_available_features : feature_id, feature_type_code foreign key ref_feature_types, feature_name, feature_description | properties : property_id, property_type_code foreign key ref_property_types, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details | other_property_features : property_id foreign key properties, feature_id foreign key other_available_features, property_feature_description",
        "label": "real_estate_properties | select t2.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code = t2.property_type_code group by t1.property_type_code",
        "db_id": "real_estate_properties",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        }
    },
    {
        "prediction": "real_estate_properties | select property_name from properties where property_type_code = \"House\" or property_type_code = \"Apartment\" and room_count > 1",
        "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "context": "What are the names of properties that are either houses or apartments with more than 1 room? | real_estate_properties | ref_feature_types : feature_type_code, feature_type_name | ref_property_types : property_type_code ( Apartment, House ), property_type_description | other_available_features : feature_id, feature_type_code foreign key ref_feature_types, feature_name, feature_description | properties : property_id, property_type_code ( Apartment, House ) foreign key ref_property_types, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details | other_property_features : property_id foreign key properties, feature_id foreign key other_available_features, property_feature_description",
        "label": "real_estate_properties | select property_name from properties where property_type_code = \"House\" union select property_name from properties where property_type_code = \"Apartment\" and room_count > 1",
        "db_id": "real_estate_properties",
        "db_path": "/transformers_cache/downloads/extracted/8e60f1cbb949793c534261eb9c85a36ba13bf30fcc8177592ba2c9de8f717b8b/spider/database",
        "db_table_names": [
            "Ref_Feature_Types",
            "Ref_Property_Types",
            "Other_Available_Features",
            "Properties",
            "Other_Property_Features"
        ],
        "db_column_names": {
            "table_id": [
                -1,
                0,
                0,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4
            ],
            "column_name": [
                "*",
                "feature_type_code",
                "feature_type_name",
                "property_type_code",
                "property_type_description",
                "feature_id",
                "feature_type_code",
                "feature_name",
                "feature_description",
                "property_id",
                "property_type_code",
                "date_on_market",
                "date_sold",
                "property_name",
                "property_address",
                "room_count",
                "vendor_requested_price",
                "buyer_offered_price",
                "agreed_selling_price",
                "apt_feature_1",
                "apt_feature_2",
                "apt_feature_3",
                "fld_feature_1",
                "fld_feature_2",
                "fld_feature_3",
                "hse_feature_1",
                "hse_feature_2",
                "hse_feature_3",
                "oth_feature_1",
                "oth_feature_2",
                "oth_feature_3",
                "shp_feature_1",
                "shp_feature_2",
                "shp_feature_3",
                "other_property_details",
                "property_id",
                "feature_id",
                "property_feature_description"
            ]
        },
        "db_foreign_keys": {
            "column_id": [
                6,
                10,
                35,
                36
            ],
            "other_column_id": [
                1,
                3,
                9,
                5
            ]
        }
    }
]