[{"prediction": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "context": "Show the record companies shared by orchestras founded before 2003 and after 2003. | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "db_id": "orchestra", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}, "schema_length": 425, "description_length": 908}, {"prediction": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "context": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? | orchestra | conductor : conductor_id, name, age, nationality, year_of_work | orchestra : orchestra_id, orchestra, conductor_id foreign key conductor, record_company, year_of_founded, major_record_format | performance : performance_id, orchestra_id foreign key orchestra, type, date, official_ratings_(millions), weekly_rank, share | show : show_id, performance_id foreign key performance, if_first_show, result, attendance | description | conductor: is a person who directs the performance of an orchestra or choir. year_of work means years of work as a conductor. nationality is the country the conductor comes from; orchestra: is a group of instrumentalists. orchestra is the name of the orchestra. record_company is the company where the orchestra makes recordings. major_record_format' is the usual format in which the orchestra made the recordings; performance: is an act of staging or presenting a play, concert or another form of entertainment. date is the date of the performance as a datetime. official_ratings_(millions) is the official number of listeners. share is the average percentage of individuals who listen to a certain channel; show: is a spectacle or display. if_first_show is 'T' if it is a first show, otherwise if it a non-first show it has value 'F'. attendance is the number of people present at the show;", "label": "orchestra | select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003", "db_id": "orchestra", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["conductor", "orchestra", "performance", "show"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], "column_name": ["*", "Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work", "Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format", "Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share", "Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "db_foreign_keys": {"column_id": [8, 13, 20], "other_column_id": [1, 6, 12]}, "schema_length": 425, "description_length": 908}, {"prediction": "car_1 | select t3.maker from model_list as t1 join car_makers as t2 on t1.model = t2.id join car_makers as t3 on t1.maker = t3.id where t1.year", "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "question": "Find the name of the makers that produced some cars in the year of 1970?", "context": "Find the name of the makers that produced some cars in the year of 1970? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model join cars_data as t4 on t3.makeid = t4.id where t4.year = '1970';", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select t3.make, t2.year from model_list as t1 join car_makers on t1.model = t2.id join car_names as t3 on t1.model = t3.id", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "question": "Find the make and production time of the cars that were produced in the earliest year?", "context": "Find the make and production time of the cars that were produced in the earliest year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select t1.maker, t2.year from car_makers as t1 join cars_data as t2 on t1.id = t2.modelid", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "question": "What is the maker of the carr produced in the earliest year and what year was it?", "context": "What is the maker of the carr produced in the earliest year and what year was it? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select t2.make, t1.year from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = (select min(year) from cars_data);", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select distinct model from model_list where model > 1980", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "question": "Which distinct car models are the produced after 1980?", "context": "Which distinct car models are the produced after 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select distinct t1.model from model_list as t1 join car_makers as t2 on t1.modelid = t2.id where t", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "question": "What are the different models for the cards produced after 1980?", "context": "What are the different models for the cards produced after 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id where t3.year > 1980;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select avg(weight), year from cars_data group by year", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "question": "What is the average weight of cars each year?", "context": "What is the average weight of cars each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select avg(weight), year from cars_data group by year;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select avg(weight), year from cars_data group by year", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "question": "What is the average weight and year for each year?", "context": "What is the average weight and year for each year? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select avg(weight), year from cars_data group by year;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select avg(h", "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "question": "What is the average horsepower of the cars before 1980?", "context": "What is the average horsepower of the cars before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select avg(horsepower) from cars_data where year < 1980;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select avg(s", "query": "select avg(horsepower) from cars_data where year  <  1980;", "question": "What is the average horsepower for all cars produced before 1980 ?", "context": "What is the average horsepower for all cars produced before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select avg(horsepower) from cars_data where year < 1980;", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select max(t2.mpg) from cars_data as t1 join car_makers as", "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "context": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select max(mpg) from cars_data where cylinders = 8 or year < 1980", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "car_1 | select max(mpg) from cars_data where cylinders = 8 union select max(mpg) from cars_data where year < 1980", "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "context": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980? | car_1 | continents : contid, continent | countries : countryid, countryname, continent foreign key continents | car_makers : id, maker, fullname, country foreign key countries | model_list : modelid, maker foreign key car_makers, model foreign key car_names | car_names : makeid foreign key cars_data, model foreign key model_list, make | cars_data : id foreign key car_names, mpg, cylinders, edispl, horsepower, weight, accelerate, year | description | continents: are the world's main continuous expanses of land; countries: are nations which occupies a certain territory. continent is the contid; car_makers: a business engaged in the manufacture of automobiles. maker is a short name of a company who manufactures cars. country is the countryid where a maker is located in; model_list: a list of models produced by different makers. maker is the car maker id manufacturing the models. model is the full name of the model; car_names: general information about cars which exist in cars data. makeid is the id of an individual car. model is model for the car from model_list. make is the name of the car type; cars_data: the technical characteristics of the produced cars are registered which correspond to the car names. id is the id of an individual car (makeid). mpg (miles per gallon) is fuel consumption; cylinders is the number of cylinders. horsepower is largest amount of horsepower. accelerate is the rate of speed increase. year when the car was manufactured;", "label": "car_1 | select max(mpg) from cars_data where cylinders = 8 or year < 1980", "db_id": "car_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["continents", "countries", "car_makers", "model_list", "car_names", "cars_data"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], "column_name": ["*", "ContId", "Continent", "CountryId", "CountryName", "Continent", "Id", "Maker", "FullName", "Country", "ModelId", "Maker", "Model", "MakeId", "Model", "Make", "Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "db_foreign_keys": {"column_id": [5, 9, 11, 14, 16], "other_column_id": [1, 3, 6, 12, 13]}, "schema_length": 440, "description_length": 1032}, {"prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "question": "Find the first name and country code of the oldest player.", "context": "Find the first name and country code of the oldest player. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position", "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 869}, {"prediction": "wta_1 | select first_name, country_code from players order by birth_date desc limit 1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "question": "What is the first name and country code of the oldest player?", "context": "What is the first name and country code of the oldest player? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is", "label": "wta_1 | select first_name, country_code from players order by birth_date limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 860}, {"prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "question": "Find the year that has the most number of matches.", "context": "Find the year that has the most number of matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position ", "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 870}, {"prediction": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "question": "Which year had the most matches?", "context": "Which year had the most matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in the player", "label": "wta_1 | select year from matches group by year order by count(*) desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 892}, {"prediction": "wta_1 | select count(*), year from matches group by year", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "question": "Find the number of matches happened in each year.", "context": "Find the number of matches happened in each year. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied", "label": "wta_1 | select count(*), year from matches group by year", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 878}, {"prediction": "wta_1 | select year, count(*) from matches group by year", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "question": "How many matches were played in each year?", "context": "How many matches were played in each year? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking is position occupied in", "label": "wta_1 | select count(*), year from matches group by year", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 881}, {"prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age asc limit 3", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "question": "Find the name and rank of the 3 youngest winners across all matches.", "context": "Find the name and rank of the 3 youngest winners across all matches. | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings: ranking", "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 857}, {"prediction": "wta_1 | select winner_name, winner_rank from matches order by winner_age asc limit 3", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "question": "What are the names and ranks of the three youngest winners across all matches?", "context": "What are the names and ranks of the three youngest winners across all matches? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:", "label": "wta_1 | select distinct winner_name, winner_rank from matches order by winner_age limit 3", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 603, "description_length": 849}, {"prediction": "wta_1 | select first_name, last_name from players order by birth_date", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "question": "What are the full names of all players, sorted by birth date?", "context": "What are the full names of all players, sorted by birth date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was", "label": "wta_1 | select first_name, last_name from players order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 831}, {"prediction": "wta_1 | select first_name, last_name from players where hand = 'left' order by birth_date", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "question": "What are the full names of all left handed players, in order of birth date?", "context": "What are the full names of all left handed players, in order of birth date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the", "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 821}, {"prediction": "wta_1 | select sum(t1.tours), t2.rank", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "question": "Find the total number of tours for each ranking date.", "context": "Find the total number of tours for each ranking date. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:", "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 849}, {"prediction": "wta_1 | select count(*), sum(t1.tours) from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.ranking_date", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "question": "How many total tours were there for each ranking date?", "context": "How many total tours were there for each ranking date? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in which the match was played; rankings:", "label": "wta_1 | select sum(tours), ranking_date from rankings group by ranking_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 849}, {"prediction": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank desc limit 1", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "context": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year", "label": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 796}, {"prediction": "wta_1 | select t2.first_name, t2.country_code, t2.birth_date from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "context": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches? | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match", "label": "wta_1 | select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 612, "description_length": 790}, {"prediction": "wta_1 | select first_name, last_name from players order by birth_date", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "question": "List the first and last name of all players in the order of birth date.", "context": "List the first and last name of all players in the order of birth date. | wta_1 | players : player_id, first_name, last_name ( Last, Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is the year in", "label": "wta_1 | select first_name, last_name from players order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 618, "description_length": 811}, {"prediction": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "question": "List the first and last name of all players who are left / L hand in the order of birth date.", "context": "List the first and last name of all players who are left / L hand in the order of birth date. | wta_1 | players : player_id, first_name, last_name ( Last, Date ), hand, birth_date, country_code | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a", "label": "wta_1 | select first_name, last_name from players where hand = 'L' order by birth_date", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 618, "description_length": 784}, {"prediction": "wta_1 | select first_name, birth_date from players where country_code = \"USA\"", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "question": "What are the first names and birth dates of players from the USA?", "context": "What are the first names and birth dates of players from the USA? | wta_1 | players : player_id, first_name, last_name, hand, birth_date, country_code ( USA ) | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc ( USA ), loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc ( USA ), winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won in a match. year is", "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 627, "description_length": 799}, {"prediction": "wta_1 | select first_name, birth_date from players where country_code = \"USA\"", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "question": "List the first name and birth date of all players from the country with code USA.", "context": "List the first name and birth date of all players from the country with code USA. | wta_1 | players : player_id, first_name, last_name ( Date ), hand, birth_date, country_code ( USA ) | matches : best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id foreign key players, loser_ioc ( USA ), loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id foreign key players, winner_ioc ( USA ), winner_name, winner_rank, winner_rank_points, winner_seed, year | rankings : ranking_date, ranking, player_id foreign key players, ranking_points, tours | description | players: are athletes who play tennis. hand is 'R' if a player is a right-handed player otherwise if the player is left-handed it is 'L'. birth_date is the birthday of a player as datetime. country_code is the player's home country code; matches: are competitions in which two players compete against each other, in each match the two players are a loser and a winner. best_of is the best player of this maximum number of sets. loser_hand is 'R' if the loser player is right-handed players or if the loser player is left-handed, then it is 'L'. loser_rank is the rank of the loser player in a match. winner_hand is 'R' if the winner player is right-handed players or if the winner player is left-handed, then it is 'L'. winner_rank is the rank of a player who won", "label": "wta_1 | select first_name, birth_date from players where country_code = 'USA'", "db_id": "wta_1", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["players", "matches", "rankings"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], "column_name": ["*", "player_id", "first_name", "last_name", "hand", "birth_date", "country_code", "best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year", "ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "db_foreign_keys": {"column_id": [32, 13, 41], "other_column_id": [1, 1, 1]}, "schema_length": 636, "description_length": 779}, {"prediction": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id", "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "question": "List the date of each treatment, together with the first name of the professional who operated it.", "context": "List the date of each treatment, together with the first name of the professional who operated it. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is", "label": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 685}, {"prediction": "dog_kennels | select t1.date_of_treatment, t1.first_name from treatments as t2 join professionals as t3 on t1.professional_id = t3.prof", "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "question": "What are the date and the operating professional's first name of each treatment?", "context": "What are the date and the operating professional's first name of each treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of", "label": "dog_kennels | select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 697}, {"prediction": "dog_kennels | select date_arrived, date_departed from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "context": "What are the arriving date and the departing date of the dogs who have gone through a treatment? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrive", "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 681}, {"prediction": "dog_kennels | select date_arrived, date_departed from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "question": "Find the arriving date and the departing date of the dogs that received a treatment.", "context": "Find the arriving date and the departing date of the dogs that received a treatment. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the", "label": "dog_kennels | select distinct t1.date_arrived, t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 689}, {"prediction": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.date_of_birth desc limit 1", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "question": "List the last name of the owner owning the youngest dog.", "context": "List the last name of the owner owning the youngest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the", "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 712}, {"prediction": "dog_kennels | select t2.last_name from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id order by t1.age limit 1", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "question": "Who owns the youngest dog? Give me his or her last name.", "context": "Who owns the youngest dog? Give me his or her last name. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival", "label": "dog_kennels | select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.age = ( select max(age) from dogs )", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 705}, {"prediction": "dog_kennels | select date_arrived, date_departed from dogs", "query": "SELECT date_arrived ,  date_departed FROM Dogs", "question": "What are the arriving date and the departing date of all the dogs?", "context": "What are the arriving date and the departing date of all the dogs? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival", "label": "dog_kennels | select date_arrived, date_departed from dogs", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 705}, {"prediction": "dog_kennels | select date_arrived, date_departed from dogs", "query": "SELECT date_arrived ,  date_departed FROM Dogs", "question": "List the arrival date and the departure date for all the dogs.", "context": "List the arrival date and the departure date for all the dogs. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the", "label": "dog_kennels | select date_arrived, date_departed from dogs", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 712}, {"prediction": "dog_kennels | select max(cost_of_treatment) from treatments", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "question": "How much does the most recent treatment cost?", "context": "How much does the most recent treatment cost? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ", "label": "dog_kennels | select cost_of_treatment from treatments order by date_of_treatment desc limit 1", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 724}, {"prediction": "dog_kennels | select age from dogs order by age desc limit 1", "query": "SELECT max(age) FROM Dogs", "question": "What is the age of the oldest dog?", "context": "What is the age of the oldest dog? | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ", "label": "dog_kennels | select max(age) from dogs", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 724}, {"prediction": "dog_kennels | select age from dogs order by age desc limit 1", "query": "SELECT max(age) FROM Dogs", "question": "Tell me the age of the oldest dog.", "context": "Tell me the age of the oldest dog. | dog_kennels | breeds : breed_code, breed_name | charges : charge_id, charge_type, charge_amount | sizes : size_code, size_description | treatment_types : treatment_type_code, treatment_type_description | owners : owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number | dogs : dog_id, owner_id foreign key owners, abandoned_yn, breed_code foreign key breeds, size_code foreign key sizes, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed | professionals : professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number | treatments : treatment_id, dog_id foreign key dogs, professional_id foreign key professionals, treatment_type_code foreign key treatment_types, date_of_treatment, cost_of_treatment | description | breeds: are categories of dogs with defined characteristics; charges: types of charges for dog care. charge_type may be 'daily accommodation','medicines', or 'Health check'. charge_amount is the cost of each type of charge; sizes: by the size of the dogs are the following categories:'small','medium' and 'large'; treatment_types: types of dog treatments; owners: information about dog owners. zip_code is a number that identifies a particular postal delivery area; dogs: information about dogs in the kennel. abandoned_yn has the value '1' if the dog was abandoned, otherwise if the dog was not abandoned, it is '0'. breed_code is the breed of the dog. date_arrived is the date of arrival of the dog in the ", "label": "dog_kennels | select max(age) from dogs", "db_id": "dog_kennels", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Breeds", "Charges", "Sizes", "Treatment_Types", "Owners", "Dogs", "Professionals", "Treatments"], "db_column_names": {"table_id": [-1, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7], "column_name": ["*", "breed_code", "breed_name", "charge_id", "charge_type", "charge_amount", "size_code", "size_description", "treatment_type_code", "treatment_type_description", "owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number", "dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed", "professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number", "treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "db_foreign_keys": {"column_id": [21, 21, 24, 23, 45, 46, 47], "other_column_id": [10, 10, 6, 1, 20, 33, 8]}, "schema_length": 844, "description_length": 724}, {"prediction": "student_transcripts_tracking | select transcript_date, transcript_id from transcripts group by transcript_id having count(*) >= 2", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "question": "Show the date and id of the transcript with at least 2 course results.", "context": "Show the date and id of the transcript with at least 2 course results. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded. line_1,", "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2", "db_id": "student_transcripts_tracking", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}, "schema_length": 1363, "description_length": 80}, {"prediction": "student_transcripts_tracking | select transcript_date, transcript_id from transcripts group by transcript_id having count(*) >= 2", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "question": "What is the date and id of the transcript with at least 2 courses listed?", "context": "What is the date and id of the transcript with at least 2 courses listed? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded. line_", "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2", "db_id": "student_transcripts_tracking", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}, "schema_length": 1363, "description_length": 78}, {"prediction": "student_transcripts_tracking | select avg(transcript_date) from transcripts", "query": "SELECT avg(transcript_date) FROM Transcripts", "question": "What is the average transcript date?", "context": "What is the average transcript date? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses which", "label": "student_transcripts_tracking | select avg(transcript_date) from transcripts", "db_id": "student_transcripts_tracking", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}, "schema_length": 1363, "description_length": 125}, {"prediction": "student_transcripts_tracking | select t2.date_first_registered, t2.date_left, t1.other_details from transcripts as t1 join students as t2 on t1.transcript_id = t2.transcript_date", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "question": "When is the first transcript released? List the date and details.", "context": "When is the first transcript released? List the date and details. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded. line_1, line_2, line", "label": "student_transcripts_tracking | select transcript_date, other_details from transcripts order by transcript_date asc limit 1", "db_id": "student_transcripts_tracking", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}, "schema_length": 1363, "description_length": 93}, {"prediction": "student_transcripts_tracking | select date_left, other_details from transcripts", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "question": "What is the earliest date of a transcript release, and what details can you tell me?", "context": "What is the earliest date of a transcript release, and what details can you tell me? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded.", "label": "student_transcripts_tracking | select transcript_date, other_details from transcripts order by transcript_date asc limit 1", "db_id": "student_transcripts_tracking", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}, "schema_length": 1363, "description_length": 72}, {"prediction": "student_transcripts_tracking", "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "question": "What is the last transcript release date?", "context": "What is the last transcript release date? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded. line_1, line_2, line_3 represent all addresses", "label": "student_transcripts_tracking | select transcript_date from transcripts order by transcript_date desc limit 1", "db_id": "student_transcripts_tracking", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}, "schema_length": 1363, "description_length": 119}, {"prediction": "student_transcripts_tracking | select transcript_date, transcript_id from transcripts group by transcript_id order by count(*) asc limit 1", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "question": "Show the date of the transcript which shows the least number of results, also list the id.", "context": "Show the date of the transcript which shows the least number of results, also list the id. | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded", "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1", "db_id": "student_transcripts_tracking", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}, "schema_length": 1363, "description_length": 71}, {"prediction": "student_transcripts_tracking | select transcript_date, transcript_id from transcripts group by transcript_id order by count(*) asc limit 1", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "question": "What is the date and id of the transcript with the least number of results?", "context": "What is the date and id of the transcript with the least number of results? | student_transcripts_tracking | addresses : address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details | courses : course_id, course_name, course_description, other_details | departments : department_id, department_name, department_description, other_details | degree_programs : degree_program_id, department_id foreign key departments, degree_summary_name, degree_summary_description, other_details | sections : section_id, course_id foreign key courses, section_name, section_description, other_details | semesters : semester_id, semester_name, semester_description, other_details | students : student_id, current_address_id foreign key addresses, permanent_address_id foreign key addresses, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details | student_enrolment : student_enrolment_id, degree_program_id foreign key degree_programs, semester_id foreign key semesters, student_id foreign key students, other_details | student_enrolment_courses : student_course_id, course_id foreign key courses, student_enrolment_id foreign key student_enrolment | transcripts : transcript_id, transcript_date, other_details | transcript_contents : student_course_id foreign key student_enrolment_courses, transcript_id foreign key transcripts | description | addresses: details of all useful addresses are recorded. line_", "label": "student_transcripts_tracking | select t2.transcript_date, t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1", "db_id": "student_transcripts_tracking", "db_path": "/transformers_cache/downloads/extracted/bf18883d3892a4f7164e40bbe64a3a1b7ea9cdac865861406053defdf3c5c20e/spider-dates/database", "db_table_names": ["Addresses", "Courses", "Departments", "Degree_Programs", "Sections", "Semesters", "Students", "Student_Enrolment", "Student_Enrolment_Courses", "Transcripts", "Transcript_Contents"], "db_column_names": {"table_id": [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10], "column_name": ["*", "address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details", "course_id", "course_name", "course_description", "other_details", "department_id", "department_name", "department_description", "other_details", "degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details", "section_id", "course_id", "section_name", "section_description", "other_details", "semester_id", "semester_name", "semester_description", "other_details", "student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details", "student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details", "student_course_id", "course_id", "student_enrolment_id", "transcript_id", "transcript_date", "other_details", "student_course_id", "transcript_id"]}, "db_foreign_keys": {"column_id": [19, 24, 34, 33, 47, 46, 45, 51, 50, 56, 55], "other_column_id": [14, 10, 1, 1, 32, 28, 18, 44, 10, 52, 49]}, "schema_length": 1363, "description_length": 78}]